{"version":3,"sources":["util/EventManager.ts","components/config/constants.ts","util/ConnectionManager.ts","contexts/UserContext.ts","components/StyledElements.tsx","types.ts","components/DisplayedPost.tsx","components/VisibleTagName.tsx","components/VisibleTagScore.tsx","components/VisibleTag.tsx","components/TagList.tsx","useTagListGuesser.tsx","components/ProgressBar.tsx","util/UIUtil.tsx","components/InRoundLeaderboard.tsx","components/TagListContainerStyles.tsx","components/TagListContainer.tsx","components/Leaderboard.tsx","pages/MainPage.tsx","components/IconPicker.tsx","images/e6TagGameMascot.png","pages/ReadyUp.tsx","usePostFetcher.tsx","pages/Lobby.tsx","images/e6TagGameMascotBlur.png","styles/theme/Theme.ts","styles/theme/GlobalTheme.tsx","App.tsx","index.tsx"],"names":["EventManager","events","this","Map","event_name","callback","get","set","Set","add","delete","data","has","console","log","forEach","handler","config","url","ConnectionManager","socket","eventManager","queue","connecting","WebSocket","onopen","send","onmessage","event","JSON","parse","dispatch","type","onclose","code","listen","push","stringify","close","instance","UserContext","createContext","score","connectionManager","getInstance","readyStates","setUserID","userID","setUsername","username","setRoomID","roomID","setScore","setIcon","icon","setOwner","owner","setReadyStates","leaveRoomCleanup","TitleContainer","styled","div","List","ul","p","theme","cBodyLight","Header","span","TitleText","h1","Container","EventType","z","enum","TagType","Post","object","name","string","number","id","tags","array","Tag","User","optional","UserReadyState","members","postQueue","postsViewedThisRound","allUsersReady","map","boolean","gameStarted","literal","CREATE_ROOM","JOIN_ROOM","LEAVE_ROOM","user","tag","GUESS_TAG","SET_USERNAME","SET_ICON","GET_SELECTED_ICONS","REQUEST_POST","ready","READY_UP","START_GAME","ALL_ROOMS","ClientRoom","room","rooms","pastIcon","selectedIcons","post","SHOW_LEADERBOARD","DisplayedPost","props","className","style","marginBottom","src","alt","VisibleTagName","tagType","VisibleTagScore","cTagCharacter","VisibleTag","HiddenTag","mTag","TagList","guessedTags","includes","alias_data","useTagListGuesser","startingTags","useState","setGuessedTags","hiddenTags","setHiddenTags","useContext","useEffect","handleGuess","useCallback","guess","tagIndex","findIndex","some","isCorrect","unsubscribers","newGuessedTags","userToUpdateScore","find","readyState","unsubscribe","userToSend","ProgressBar","percentComplete","totalTime","color","width","inputHeight","cTagArtist","cTagSpecies","icons","character","file","source","artist","buildUIIconImg","path","IN_GAME_LEADERBOARD_CLASS_NAMES","InRoundLeaderboardContainer","InRoundLeaderboardName","cPrimaryText","cLobbyBackground","InRoundLeaderboardScore","InRoundLeaderboardEntry","li","InRoundLeaderboard","newReadyStates","filter","leaderBoardOrder","useMemo","order","sort","readyStateA","readyStateB","i","renderLeaderboardEntry","zIndex","length","isRanked","isFirst","TagListLabel","h2","TagsInputContainer","TagsInput","TagsGrid","TagsList","pTagList","TagListContainer","setGuess","guessTag","generalTags","artistTags","characterTags","speciesTags","guessedGeneralTags","guessedArtistTags","guessedCharacterTags","guessedSpeciesTags","time","setTime","readyForNextRound","error","myReadyState","timer","setInterval","clearInterval","onSubmit","e","preventDefault","value","onChange","target","slice","Math","ceil","RANK_BAR_CLASS_NAMES","LeaderBoardUserIconContainer","LeaderBoardRankScore","LeaderBoardOuterContainer","LeaderBoardInnerContainer","LeaderBoardRank","LeaderBoardRankBar","cRankFirst","cRankSecond","cRankThird","LeaderBoard","highestScore","rank","rankBarWidth","floor","rankBarClassName","marginRight","emptyTagList","LeaderBoardPageView","NextRoundButton","button","MediaContainer","MainPage","currentPost","update","showLeaderboard","setShowLeaderboard","canStartNewRound","every","startNewRound","shouldShowLeaderboard","onClick","IconArtist","a","CharacterName","IconList","IconPicker","allIcons","setSelectedIcons","iconSetterUserID","newSelectedIcons","selectedIcon","userToChangeIcon","getSelectedIcons","gameIcon","buttonClass","selectIcon","href","ReadyStatus","ReadyUpButton","RoomUpdateButton","StartGameContainer","UsersInLobbyContainer","ReadyUpList","ReadyUpContainer","ReadyUpView","ReadyUp","setCurrentPost","newPost","b","usePostFetcher","navigate","useNavigate","newOwner","readyUp","canStartGame","startGame","leaveRoom","document","body","backgroundImage","reg","renderLobbyUserIcon","userIcon","gridArea","renderReadyState","readyUpButtonClassName","readyUpButtonText","readyUpButton","roomName","Lobby","usernameInput","setUsernameInput","setRooms","createUsername","createRoom","joinRoom","getAllRooms","renderRoom","paddingTop","RoomNameContainer","JoinRoomButton","ReadyUpStatesContainer","ReadyUpState","BlurredImage","paddingBottom","marginTop","InfoBar","display","justifyContent","alignItems","marginLeft","form","Input","placeholder","size","input","bgImageBlur","Theme","bgImage","blur","GlobalStyles","createGlobalStyle","App","undefined","Provider","element","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9359f96f.chunk.js","sourcesContent":["import { SocketCallBack } from \"./ConnectionManager\";\r\nimport type { EventTypeType } from '../types'\r\n\r\nexport default class EventManager {\r\n    private events: Map<EventTypeType, Set<(...args: any[]) => void | Promise<void>>>;\r\n\r\n    public constructor() {\r\n        this.events = new Map();\r\n    }\r\n\r\n    public listen<T>(event_name: EventTypeType, callback: SocketCallBack<T>) {\r\n        if(!this.events.get(event_name)) {\r\n            // setup dummy function\r\n            this.events.set(event_name, new Set<(...args: any[]) => void>());\r\n        }\r\n        this.events.get(event_name)!.add(callback);\r\n        return () => {\r\n            this.events.get(event_name)?.delete(callback);\r\n        }\r\n    }\r\n\r\n    public dispatch<T>(event_name: EventTypeType, data: T) {\r\n        if(this.events.has(event_name)) {\r\n            console.log(`Handling event: ${event_name}...`);\r\n            this.events.get(event_name)!.forEach((handler) => handler(data));\r\n        }\r\n    }\r\n}","type Config = {\r\n    url: string\r\n}\r\n\r\nconst production : Config = {\r\n    url: \"wss://e621-tag-feud-server.fly.dev\"\r\n}\r\n\r\nconst development : Config = {\r\n    url: \"ws://localhost:8080\"\r\n} \r\n\r\nconst config = process.env.NODE_ENV === 'development' ? development : production;\r\n\r\nexport default config;","import EventManager from \"./EventManager\";\r\nimport type { EventTypeType } from \"../types\";\r\nimport config from '../components/config/constants';\r\n\r\nexport type SocketCallBack<T> = (data: T) => void | Promise<void>;\r\n\r\nexport class ConnectionManager {\r\n    private static instance: ConnectionManager;\r\n    private socket: WebSocket;\r\n    private eventManager = new EventManager();\r\n\r\n    private queue: string[];\r\n\r\n    public connecting = true;\r\n\r\n    /**\r\n     * The Singleton's constructor should always be private to prevent direct\r\n     * construction calls with the `new` operator.\r\n     */\r\n    private constructor() {\r\n        this.socket = new WebSocket(config.url);\r\n        this.queue = [];\r\n        this.socket.onopen = () => {\r\n            console.log(\"I am connecting to the server\");\r\n            this.connecting = false;\r\n            this.queue.forEach(data => this.socket.send(data));\r\n            this.queue = [];\r\n        }\r\n\r\n        this.socket.onmessage = (event) => {\r\n            const data = JSON.parse(event.data);\r\n            this.eventManager.dispatch(data.type, data);\r\n        }\r\n\r\n        this.socket.onclose = (event) => {\r\n            console.log(event.code);\r\n            console.log('closing socket');\r\n            this.connecting = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The static method that controls the access to the singleton instance.\r\n     *\r\n     * This implementation let you subclass the Singleton class while keeping\r\n     * just one instance of each subclass around.\r\n     */\r\n    public static getInstance(): ConnectionManager {\r\n        console.log(ConnectionManager.instance);\r\n        if (!ConnectionManager.instance) {\r\n            console.log(\"making new Connection Manager\");\r\n            ConnectionManager.instance = new ConnectionManager();\r\n        }\r\n        return ConnectionManager.instance;\r\n    }\r\n\r\n    public listen<T>(event_name: EventTypeType, callback: SocketCallBack<T>) {\r\n        return this.eventManager.listen(event_name, callback);\r\n    }\r\n\r\n    public send<T>(data: T) {\r\n        if(this.connecting) {\r\n            console.log(`Still connecting, adding to queue: ${data}`);\r\n            this.queue.push(JSON.stringify({...data}))\r\n        } else {\r\n            console.log(`ConnectedType, sending to server: ${data}`);\r\n            this.socket.send(JSON.stringify({...data}));\r\n        }\r\n    }\r\n\r\n    public cleanup() {\r\n        this.socket.close();\r\n    }\r\n}","import { createContext } from 'react';\r\nimport { ConnectionManager } from '../util/ConnectionManager';\r\nimport type {UserReadyStateType, UserType} from '../types';\r\n\r\ntype UserContextType = {\r\n    // user specific things\r\n    userID?: string,\r\n    username?: string,\r\n    score: number,\r\n    // room specific things\r\n    roomID?: string,\r\n    icon?: string,\r\n    readyStates: UserReadyStateType[],\r\n    owner?: UserType,\r\n    connectionManager: ConnectionManager\r\n\r\n    setUserID: (userID: string) => void,\r\n    setUsername: (username: string) => void,\r\n    setRoomID: (roomID: string) => void,\r\n    setIcon: (icon: string) => void,\r\n    setReadyStates: (readyStates: UserReadyStateType[]) => void,\r\n    setOwner: (owner: UserType) => void,\r\n    setScore: (score: number) => void,\r\n    leaveRoomCleanup: () => void,\r\n}\r\n\r\nexport const UserContext = createContext<UserContextType>({\r\n        score: 0,\r\n        connectionManager: ConnectionManager.getInstance(),\r\n        readyStates: [],\r\n    \r\n        setUserID: (userID: string) => {},\r\n        setUsername: (username: string) => {},\r\n        setRoomID: (roomID: string) => {},\r\n        setScore: (score: number) => {},\r\n        setIcon: (icon: string) => {},\r\n        setOwner: (owner: UserType) => {},\r\n        setReadyStates: (readyStates: UserReadyStateType[]) => {},\r\n        leaveRoomCleanup: () => {},\r\n});","import styled from 'styled-components';\r\n\r\nexport const TitleContainer = styled.div`\r\n    margin: 10px;\r\n    width: 480px;\r\n    max-width: 98vw;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 5px #000;\r\n    text-shadow: 0 0 2px black, 0 0 6px black;\r\n    z-index: 2;\r\n`;\r\n\r\nexport const List = styled.ul`\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: left;\r\n\r\n    li {\r\n        display: grid;\r\n        grid-template-columns: 3fr 1fr 4fr;\r\n        column-gap: 2.5rem;\r\n        background-color: ${p => p.theme.cBodyLight};\r\n        border-radius: 4px;\r\n        width: calc(100% - 4rem);\r\n        padding: 0 1rem 0.25rem 1rem;\r\n    }\r\n`;\r\n\r\nexport const Header = styled.span`\r\n    width: 75%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-self: flex-start;\r\n    padding-left: 32px;\r\n`;\r\n\r\nexport const TitleText = styled.h1`\r\n    font-size: 3.5em;\r\n    color: #b4c7d9;\r\n    text-decoration: none;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: grid; \r\n    grid-template-columns: 1fr 0.5fr 1fr; \r\n    grid-template-rows: 2.25fr 2.25fr 0.75fr; \r\n    grid-template-areas:\r\n    '. . rooms'\r\n    '. e6-join rooms'\r\n    '. e6-create rooms';\r\n    column-gap: 2.5rem;\r\n\r\n    text-align: center;\r\n    position: absolute;\r\n    top: 16em;\r\n    left: 0;\r\n    right: 0;\r\n    \r\n    padding: 0 0 4em 0;\r\n\r\n    a {\r\n        color: #a3bcd3;\r\n        text-decoration: none;\r\n        padding: 0.25rem 0.25rem;\r\n        border: 0;\r\n        font-family: inherit;\r\n        font-size: 100%;\r\n        line-height: 1.25em;\r\n        margin: 0;\r\n    }\r\n    a:hover {\r\n        color: #e9f2fa;\r\n    }\r\n\r\n    input {\r\n        min-width: 8rem;\r\n        border-radius: 2px;\r\n        padding: 1px 4px;\r\n        line-height: normal;\r\n        font-size: 100%;\r\n        margin: 0;\r\n        vertical-align: middle;\r\n        outline: none;\r\n        cursor: pointer;\r\n        border: 0px solid;\r\n    }\r\n\r\n    input:focus {\r\n        background: #ffc;\r\n        color: #000;\r\n        outline: none;\r\n    }\r\n\r\n    button {\r\n        min-width: 8rem;\r\n        border-radius: 2px;\r\n        padding: 1px 4px;\r\n        line-height: normal;\r\n        font-size: 100%;\r\n        margin: 0;\r\n        vertical-align: middle;\r\n        outline: none;\r\n        cursor: pointer;\r\n        border: 0px solid;\r\n    }\r\n\r\n    button:focus {\r\n        background: #ffc;\r\n        color: #000;\r\n        outline: none;\r\n    }\r\n`","// @ts-nocheck\r\nimport { z } from 'zod';\r\n\r\n// shared\r\nexport const EventType = z.enum(['DEFAULT',\r\n    'CREATE_ROOM',\r\n    'ALL_ROOMS',\r\n    'GUESS_TAG',\r\n    'READY_UP',\r\n    'START_GAME',\r\n    'SET_USERNAME',\r\n    'SET_ICON',\r\n    'GET_SELECTED_ICONS',\r\n    'JOIN_ROOM',\r\n    'LEAVE_ROOM',\r\n    'REQUEST_POST',\r\n    'SHOW_LEADERBOARD']);\r\n\r\n/**\r\n * Server-Only Types\r\n */\r\nexport const TagType = z.enum([\"general\", \"species\", \"character\", \"artist\"]);\r\n\r\nexport const PostTag = z.object({\r\n    name: z.string(),\r\n    type: TagType,\r\n    score: z.number(),\r\n})\r\n\r\nexport const Post = z.object({\r\n    id: z.number(),\r\n    url: z.string(),\r\n    tags: z.array(Tag)\r\n})\r\n\r\nexport const User = z.object({\r\n    username: z.string(),\r\n    id: z.string(),\r\n    score: z.number(),\r\n    icon: z.optional(z.string()),\r\n    roomID: z.optional(z.string())\r\n})\r\n\r\nexport const ServerRoom = z.object({\r\n    id: z.string(),\r\n    owner: User,\r\n    members: z.array(User),\r\n    postQueue: z.array(Post),\r\n    postsViewedThisRound: z.number(),\r\n    allUsersReady: z.map(z.string(), z.boolean()),\r\n    gameStarted: z.boolean(),\r\n})\r\n\r\nexport const CreateRoomEventData = z.object({\r\n    userID: z.string(),\r\n    type: z.literal(EventType.enum.CREATE_ROOM)\r\n});\r\nexport const JoinRoomEventData = z.object({\r\n    userID: z.optional(z.string()),\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.JOIN_ROOM)\r\n});\r\nexport const LeaveRoomEventData = z.object({\r\n    userID: z.string(),\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.LEAVE_ROOM)\r\n});\r\nexport const GuessTagEventData = z.object({\r\n    user: User,\r\n    tag: Tag,\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.GUESS_TAG)\r\n});\r\nexport const SetUsernameEventData = z.object({\r\n    username: z.string(),\r\n    userID: z.optional(z.string()),\r\n    type: z.literal(EventType.enum.SET_USERNAME)\r\n});\r\nexport const SetUserIconEventData = z.object({\r\n    icon: z.string(),\r\n    userID: z.string(),\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.SET_ICON)\r\n});\r\nexport const GetSelectedIconsEventData = z.object({\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.GET_SELECTED_ICONS)\r\n});\r\nexport const RequestPostEventData = z.object({\r\n    roomID: z.string(),\r\n    userID: z.string(),\r\n    type: z.literal(EventType.enum.REQUEST_POST)\r\n});\r\nexport const ReadyUpEventData = z.object({\r\n    userID: z.string(),\r\n    roomID: z.string(),\r\n    ready: z.boolean(),\r\n    type: z.literal(EventType.enum.READY_UP)\r\n});\r\nexport const StartGameEventData = z.object({\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.START_GAME)\r\n})\r\nexport const AllRoomsEventData = z.object({\r\n    type: z.literal(EventType.enum.ALL_ROOMS)\r\n})\r\n\r\n/**\r\n * Client Types\r\n */\r\nexport const UserReadyState = z.object({\r\n    user: User,\r\n    ready: z.boolean(),\r\n    icon: z.optional(z.string()),\r\n})\r\n\r\nexport const ClientRoom = z.object({\r\n    roomID: z.string(),\r\n    owner: User,\r\n    readyStates: z.array(UserReadyState)\r\n})\r\n\r\nexport const CreateRoomEventDataToClient = z.object({\r\n    roomID: z.string(),\r\n    readyStates: z.array(z.boolean()),\r\n    userID: z.optional(z.string()),\r\n    type: z.literal(EventType.enum.CREATE_ROOM)\r\n});\r\n\r\nexport const JoinRoomEventDataToClient = z.object({\r\n    user: User,\r\n    room: ClientRoom,\r\n    type: z.literal(EventType.enum.JOIN_ROOM)\r\n});\r\n\r\nexport const LeaveRoomEventDataToClient = z.object({\r\n    room: ClientRoom,\r\n    type: z.literal(EventType.enum.LEAVE_ROOM)\r\n});\r\n\r\nexport const AllRoomsEventDataToClient = z.object({\r\n    rooms: z.array(ClientRoom),\r\n    type: z.literal(EventType.enum.ALL_ROOMS)\r\n});\r\n\r\nexport const GuessTagEventDataToClient = z.object({\r\n    tag: Tag,\r\n    user: User,\r\n    type: z.literal(EventType.enum.GUESS_TAG)\r\n});\r\n\r\nexport const SetUsernameEventDataToClient = z.object({\r\n    user: User,\r\n    type: z.literal(EventType.enum.SET_USERNAME)\r\n})\r\n\r\nexport const SetUserIconEventDataToClient = z.object({\r\n    userID: z.string(),\r\n    icon: z.optional(z.string()),\r\n    pastIcon: z.optional(z.string()),\r\n    type: z.literal(EventType.enum.SET_ICON)\r\n})\r\n\r\nexport const GetSelectedIconsEventDataToClient = z.object({\r\n    selectedIcons: z.array(z.string()),\r\n    type: z.literal(EventType.enum.GET_SELECTED_ICONS)\r\n})\r\n\r\nexport const RequestPostEventDataToClient = z.object({\r\n    post: z.optional(Post),\r\n    type: z.literal(EventType.enum.REQUEST_POST)\r\n})\r\n\r\nexport const ReadyUpEventDataToClient = z.object({\r\n    roomID: z.string(),\r\n    room: ClientRoom,\r\n    type: z.literal(EventType.enum.READY_UP)\r\n});\r\n\r\nexport const StartGameEventDataToClient = z.object({\r\n    type: z.literal(EventType.enum.START_GAME)\r\n})\r\n\r\nexport const ShowLeaderboardEventDataToClient = z.object({\r\n    type: z.literal(EventType.enum.SHOW_LEADERBOARD)\r\n})\r\n\r\n/**\r\n * Server-Only Object Types\r\n */\r\nexport type ServerRoomType = z.infer<typeof ServerRoom>;\r\n\r\n/**\r\n * Server-Only Types\r\n */\r\nexport type CreateRoomEventDataType = z.infer<typeof CreateRoomEventData>\r\nexport type JoinRoomEventDataType = z.infer<typeof JoinRoomEventData>\r\nexport type LeaveRoomEventDataType = z.infer<typeof LeaveRoomEventData>\r\nexport type RequestPostEventDataType = z.infer<typeof RequestPostEventData>\r\nexport type GuessTagEventDataType = z.infer<typeof GuessTagEventData>\r\nexport type SetUsernameEventDataType = z.infer<typeof SetUsernameEventData>\r\nexport type SetUserIconEventDataType = z.infer<typeof SetUserIconEventData>\r\nexport type GetSelectedIconsEventDataType = z.infer<typeof GetSelectedIconsEventData>\r\nexport type StartGameEventDataType = z.infer<typeof StartGameEventData>\r\nexport type ReadyUpEventDataType = z.infer<typeof ReadyUpEventData>\r\nexport type AllRoomsEventDataType = z.infer<typeof AllRoomsEventData>\r\n\r\n/**\r\n * Client-Only Types\r\n */\r\nexport type CreateRoomEventDataToClientType = z.infer<typeof CreateRoomEventDataToClient>\r\nexport type JoinRoomEventDataToClientType = z.infer<typeof JoinRoomEventDataToClient>\r\nexport type LeaveRoomEventDataToClientType = z.infer<typeof LeaveRoomEventDataToClient>\r\nexport type AllRoomsEventDataToClientType = z.infer<typeof AllRoomsEventDataToClient>\r\nexport type GuessTagEventDataToClientType = z.infer<typeof GuessTagEventDataToClient>\r\nexport type RequestPostEventDataToClientType = z.infer<typeof RequestPostEventDataToClient>\r\nexport type SetUsernameEventDataToClientType = z.infer<typeof SetUsernameEventDataToClient>\r\nexport type SetUserIconEventDataToClientType = z.infer<typeof SetUserIconEventDataToClient>\r\nexport type GetSelectedIconsEventDataToClientType = z.infer<typeof GetSelectedIconsEventDataToClient>\r\nexport type ReadyUpEventDataToClientType = z.infer<typeof ReadyUpEventDataToClient>\r\nexport type StartGameEventDataToClientType = z.infer<typeof StartGameEventDataToClient>\r\nexport type ShowLeaderboardEventDataToClientType = z.infer<typeof ShowLeaderboardEventDataToClient>\r\n\r\nexport type ClientRoomType = z.infer<typeof ClientRoom>;\r\n\r\n/**\r\n * Shared Types\r\n */\r\nexport type TagTypeType = z.infer<typeof TagType>\r\nexport type PostTagType = z.infer<typeof PostTag>;\r\nexport type PostType = z.infer<typeof Post>;\r\nexport type UserType = z.infer<typeof User>;\r\nexport type EventTypeType = z.infer<typeof EventType>;\r\nexport type UserReadyStateType = z.infer<typeof UserReadyState>;","import type { PostType } from '../types';\nimport styled from 'styled-components';\n\ninterface Props {\n    post?: PostType;\n    className?: string;\n}\n\nconst DisplayedPostElement : React.FC<Props> = (props : Props) => {\n    const { post, className } = props;\n    if (post) {\n        return ( \n            <div>\n                <div className={className}>\n                    <img style={{marginBottom: \"20px\"}} src={post?.url ?? ''} alt=''/>\n                    <br />\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <h1>No Post :(</h1>\n        );\n    };\n};\n\nexport const DisplayedPost = styled(DisplayedPostElement)`\n    flex: 1 1 auto;\n    align-self: auto;\n    background-color: #1F3C67;\n\n    padding: 25px;\n    margin: 20px 75px 0px 75px;\n\n    border-radius: 20px;\n`\n","import type { TagTypeType } from '../types';\nimport styled from 'styled-components';\n\ninterface Props {\n    name: string;\n    tagType: TagTypeType;\n    className?: string;\n}\n\nconst VisibleTagNameElement : React.FC<Props> = (props) => {\n    const { name, className } = props;\n    return (\n        <p className={className}>{name}</p>\n    )\n}\n\nexport const VisibleTagName = styled(VisibleTagNameElement)<Props>`\n    order: 0;\n    flex: 0 1 auto;\n    align-self: auto;\n\n    /* Extracting tagType from this */\n    color: var(--c-tag-${({ tagType }) => tagType})\n`","import styled from 'styled-components';\n\ninterface Props {\n    score: number;\n    className?: string;\n}\n\nconst VisibleTagScoreElement : React.FC<Props> = (props) => {\n    const { score, className } = props;\n    return (\n        <span className={className}>{score}</span>\n    )\n}\n\nexport const VisibleTagScore = styled(VisibleTagScoreElement)<Props>`\n    order: 0;\n    flex: 0 1 auto;\n    align-self: auto;\n\n    color: ${p => p.theme.cTagCharacter}\n`","import type { PostTagType } from '../types';\nimport { VisibleTagName } from './VisibleTagName';\nimport styled from 'styled-components';\nimport { VisibleTagScore } from './VisibleTagScore';\n\ninterface VisibleProps {\n    tag: PostTagType;\n    className?: string;\n}\n\nconst TagElement : React.FC<VisibleProps> = (props) => {\n    const { tag, className } = props;\n    return (\n        <div className={className}>\n            <VisibleTagName name={tag.name} tagType={tag.type}></VisibleTagName>\n            <VisibleTagScore score={tag.score}/>\n        </div>\n    )\n}\n\nexport const VisibleTag = styled(TagElement)`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    flex-grow: 1;\n    justify-content: space-between;\n    align-content: flex-start;\n    align-items: flex-start;\n\n    padding: 2px;\n`\n\ninterface HiddenProps {\n    className?: string\n}\n\nconst HiddenTagElement : React.FC<HiddenProps> = (props) => {\n    const { className } = props;\n    return (\n        <li className={className}>???</li>\n    )\n}\n\nexport const HiddenTag = styled(HiddenTagElement)`\n    display: block;\n\n    margin: ${p => p.theme.mTag};\n    letter-spacing: 20px;\n\n    border: 2px dashed #B4C7D9;\n    border-radius: 5px;\n\n    text-align: center;\n    font-style: italic;\n`","import { VisibleTag, HiddenTag } from './VisibleTag';\nimport type { PostTagType } from '../types';\n\ninterface Props {\n    tags: PostTagType[],\n    guessedTags: PostTagType[]\n}\n\nexport const TagList : React.FC<Props> = (props : Props) => {\n    const {tags, guessedTags} = props;\n\n    return (\n        <>\n            <ul>\n                {\n                    tags.map((tag) => {\n                        if(guessedTags.includes(tag)) {\n                            // render VisibleTag\n                            return <VisibleTag tag={tag}></VisibleTag>\n                        } else {\n                            // render HiddenTag\n                            return <HiddenTag></HiddenTag>\n                        }\n                    })\n                }\n            </ul>\n        </>\n    )\n}","import { useEffect, useState, useCallback, useContext } from 'react';\nimport type { GuessTagEventDataType, GuessTagEventDataToClientType, PostTagType, UserType } from './types';\nimport alias_data_untyped from './data/tag-aliases.json'\nimport { UserContext } from './contexts/UserContext';\nimport { EventType } from './types';\n\nconst alias_data : Record<string, string> = alias_data_untyped;\n\nfunction checkAlias(tag_name: string) : string {\n    const true_value = alias_data[tag_name];\n    if (true_value) {\n        return true_value\n    } else {\n        return '';\n    }\n}\n// custom hook, returns an object that has the CurrentPost, and an update callback function that we define\nexport default function useTagListGuesser(startingTags : PostTagType[]) : [\n    PostTagType[], (guess: string) => boolean\n] {\n    // want component re-rendering when this changes\n    const [guessedTags, setGuessedTags] = useState<PostTagType[]>([]);\n    const [hiddenTags, setHiddenTags] = useState(startingTags);\n    const {connectionManager, username, readyStates, setReadyStates, userID, roomID, score} = useContext(UserContext);\n\n    // TODO: uncomment once reveal all tags functionality is added\n    // function revealAllTags() {\n    //     setGuessedTags([...guessedTags, ...hiddenTags]);\n    // }\n\n    // function hideAllTags() {\n    //     setGuessedTags([]);\n    // }\n\n    // reset on new post\n    useEffect(() => {\n        setHiddenTags(startingTags);\n        setGuessedTags([]);\n    }, [startingTags])\n\n    const handleGuess = useCallback((guess: string) : {isCorrect: boolean, tag?: PostTagType} => {\n        let tagIndex = hiddenTags.findIndex((tag : PostTagType) => tag.name === guess);\n        if(guessedTags.some(tag => tag.name === guess)){\n            // console.log('short circuiting, already guessed');\n            return {isCorrect: false};\n        }\n        if(tagIndex < 0) {\n            // see if there is an alias\n            guess = checkAlias(guess);\n            if(guess === '') {\n                // short-circuit on faulty guess, return false for did not guess tag correctly\n                return {isCorrect: false};\n            }\n            tagIndex = hiddenTags.findIndex((tag : PostTagType) => tag.name === guess)\n            if(tagIndex === -1) {\n                return {isCorrect: false};\n            }\n        }\n        console.log(\"successful guess\");\n        const guessedTag = hiddenTags[tagIndex];\n        return {isCorrect: true, tag: guessedTag};\n    }, [guessedTags, hiddenTags]);\n    \n    // define what the update callback will be\n    const guessTag = (guess: string) : boolean => {\n        const {isCorrect, tag} = handleGuess(guess);\n        if(userID && roomID && isCorrect && tag != null) {\n            // TODO: emit username as well\n            const usernameToSend = username ?? 'DEFAULT_USERNAME';\n            const userToSend: UserType = {id: userID, score, username: usernameToSend, roomID};\n            const data: GuessTagEventDataType = {type: EventType.enum.GUESS_TAG, tag, user: userToSend, roomID};\n            connectionManager.send(data);\n        }\n        return isCorrect;\n    }\n\n    useEffect(() => {\n        // console.log(\"adding event listener...\");\n        const onGuess = (data: GuessTagEventDataToClientType) => {\n            const {isCorrect, tag} = handleGuess(data.tag.name);\n            console.log(`isCorrect: ${isCorrect} Tag: ${tag}`);\n            if(isCorrect && tag != null) {\n                // TODO: associate guessed tags with a user that guessed it\n                const newGuessedTags = [...guessedTags, tag];\n                setGuessedTags(newGuessedTags);\n                // update user's score on client side\n                const userToUpdateScore = readyStates.find(readyState => readyState.user.id === data.user.id);\n                if(userToUpdateScore) {\n                    console.log(`score before: ${userToUpdateScore.user.score}`);\n                    userToUpdateScore.user.score += tag.score;\n                    console.log(`score after: ${userToUpdateScore.user.score}`);\n                    setReadyStates([...readyStates]);\n                }\n            }\n        };\n        const unsubscribers = [connectionManager.listen<GuessTagEventDataToClientType>(EventType.enum.GUESS_TAG, onGuess)];\n        return () => {\n            unsubscribers.forEach(unsubscribe => unsubscribe());\n        }\n\n    }, [connectionManager, guessedTags, handleGuess, readyStates, setReadyStates])\n\n    return [ guessedTags, guessTag ];\n  }","import styled from 'styled-components';\n\ninterface Props {\n  percentComplete: number;\n  totalTime : number;\n  className?: string;\n}\n\nconst ProgressBarElement : React.FC<Props> = ({ percentComplete, totalTime, className }) => {\n\n    const color = percentComplete > 66 ? \"character\" : percentComplete > 33 ? \"artist\" : \"species\";\n\n  return <div className={className}>\n      <div style={{width: `${percentComplete}%`}} className={`inner-bar ${color}`}></div>\n    </div>\n};\n\nexport const ProgressBar = styled(ProgressBarElement)<Props>`\n\npadding: 5px;\nbackground-color: white;\nborder-radius: 10px;\nheight: ${p => p.theme.inputHeight};\n\n.inner-bar {\n    height: 100%;\n    border-radius: 8px;\n\n    transition: ${props => props.totalTime / 6}s ease background-color;\n\n    &.character {\n        background-color: ${p => p.theme.cTagCharacter};\n    }\n\n    &.artist {\n        background-color: ${p => p.theme.cTagArtist};\n    }\n\n    &.species {\n        background-color: ${p => p.theme.cTagSpecies};\n    }\n}\n`","export type IconData = {\r\n    character: string,\r\n    file: string,\r\n    source: string,\r\n    artist: string\r\n}\r\n\r\nexport const icons : IconData[] = [\r\n    {\r\n        character: \"Anubis\",\r\n        file: 'anubis.jpg',\r\n        source: \"https://e621.net/posts/1929467\",\r\n        artist: \"lollipopcon\",\r\n    },\r\n    {\r\n        character: \"Asriel\",\r\n        file: 'asriel.jpg',\r\n        source: \"https://e621.net/posts/2462955\",\r\n        artist: \"desertkaiju\",\r\n    },\r\n    {\r\n        character: \"Bowser\",\r\n        file: 'bowser.jpg',\r\n        source: \"https://e621.net/posts/3120493\",\r\n        artist: \"poppin\",\r\n    },\r\n    {\r\n        character: \"Charizard\",\r\n        file: 'charizard.jpg',\r\n        source: \"https://e621.net/posts/3120493\",\r\n        artist: \"zackary911\",\r\n    },\r\n    {\r\n        character: \"Falco Lombardi\",\r\n        file: 'falco.jpg',\r\n        source: \"https://e621.net/posts/1927518\",\r\n        artist: \"zackary911\",\r\n    },\r\n    {\r\n        character: \"Fox Mccloud\",\r\n        file: 'fox.jpg',\r\n        source: \"https://e621.net/posts/1985010\",\r\n        artist: \"braeburned\",\r\n    },\r\n    {\r\n        character: \"Isabelle\",\r\n        file: 'isabelle.jpg',\r\n        source: \"https://e621.net/posts/3057593\",\r\n        artist: \"ooomaybeitscake\",\r\n    },\r\n    {\r\n        character: \"Judy Hops\",\r\n        file: 'judy hops.jpg',\r\n        source: \"https://e621.net/posts/2513092\",\r\n        artist: \"fluff-kevlar\",\r\n    },\r\n    {\r\n        character: \"Krystal\",\r\n        file: 'krystal.jpg',\r\n        source: \"https://e621.net/posts/2672616\",\r\n        artist: \"cervina7\",\r\n    },\r\n    {\r\n        character: \"Legosi\",\r\n        file: 'legosi.png',\r\n        source: \"https://e621.net/posts/2926191\",\r\n        artist: \"mytigertail\",\r\n    },\r\n    {\r\n        character: \"Loona\",\r\n        file: 'loona.jpg',\r\n        source: \"https://e621.net/posts/2620915\",\r\n        artist: \"whisperingfornothing\",\r\n    },\r\n    {\r\n        character: \"Louis\",\r\n        file: 'louis.jpg',\r\n        source: \"https://e621.net/posts/2862902\",\r\n        artist: \"meesh\",\r\n    },\r\n    {\r\n        character: \"Lucario\",\r\n        file: 'lucario.jpg',\r\n        source: \"https://e621.net/posts/3324889\",\r\n        artist: \"kaffii\",\r\n    },\r\n    {\r\n        character: \"Nick Wilde\",\r\n        file: 'nick wilde.jpg',\r\n        source: \"https://e621.net/posts/2735733\",\r\n        artist: \"zaush\",\r\n    },\r\n    {\r\n        character: \"Renamon\",\r\n        file: 'renamon.jpg',\r\n        source: \"https://e621.net/posts/2656960\",\r\n        artist: \"fluff-kevlar\",\r\n    },\r\n    {\r\n        character: \"Rocket Raccoon\",\r\n        file: 'rocket.jpg',\r\n        source: \"https://e621.net/posts/2131319\",\r\n        artist: \"brunchpup\",\r\n    },\r\n    {\r\n        character: \"Spyro\",\r\n        file: 'spyro.jpg',\r\n        source: \"https://e621.net/posts/2354865\",\r\n        artist: \"xnirox\",\r\n    },\r\n    {\r\n        character: \"Toriel\",\r\n        file: 'toriel.jpg',\r\n        source: \"https://e621.net/posts/2279623\",\r\n        artist: \"r-mk\",\r\n    },\r\n    {\r\n        character: \"Umbreon\",\r\n        file: 'umbreon.jpg',\r\n        source: \"https://e621.net/posts/2046797\",\r\n        artist: \"zackary911\",\r\n    },\r\n    {\r\n        character: 'Wolf O\\'Donnel',\r\n        file: 'wolf.jpg',\r\n        source: \"https://e621.net/posts/1807318\",\r\n        artist: \"glitter trap boy\",\r\n    },\r\n]\r\n\r\nexport const buildUIIconImg = (path: string, icon: string, className?: string) => {\r\n    return <img src={`${path}${icon}`} alt={`${icon}`} className={className ?? ''} />;\r\n}","import { useEffect, useMemo, useContext, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport type { UserReadyStateType, GuessTagEventDataToClientType } from '../types';\r\nimport { EventType } from '../types';\r\nimport { UserContext } from '../contexts/UserContext';\r\nimport { buildUIIconImg } from '../util/UIUtil';\r\n\r\ninterface Props {\r\n    className?: string;\r\n};\r\n\r\nconst IN_GAME_LEADERBOARD_CLASS_NAMES = ['first', 'second', 'third'];\r\n\r\nconst InRoundLeaderboard: React.FC<Props> = ({className} : Props) => {\r\n    const {readyStates, setReadyStates, connectionManager} = useContext(UserContext);\r\n\r\n    useEffect(() => {\r\n        const onSuccessfulGuess = (data: GuessTagEventDataToClientType) => {\r\n            const {user} = data;\r\n            const newReadyStates = readyStates.filter(readyState => readyState.user.id !== user.id);\r\n            setReadyStates(newReadyStates);\r\n        };\r\n\r\n        const unsubscribers = [\r\n            connectionManager.listen<GuessTagEventDataToClientType>(EventType.enum.GUESS_TAG, onSuccessfulGuess)\r\n        ]\r\n\r\n        return () => {\r\n            unsubscribers.forEach(unsubscribe => unsubscribe());\r\n        }\r\n    }, [connectionManager, readyStates, setReadyStates]);\r\n\r\n    const leaderBoardOrder = useMemo(() => {\r\n        const order = new Map<string, number>();\r\n        readyStates.sort((readyStateA, readyStateB) => readyStateB.user.score - readyStateA.user.score);\r\n        readyStates.forEach((readyState, i) => {\r\n            order.set(readyState.user.id, i);\r\n        });\r\n        return order;\r\n    }, [readyStates]);\r\n\r\n    const renderLeaderboardEntry = useCallback((readyState: UserReadyStateType) => {\r\n        const order = leaderBoardOrder.get(readyState.user.id);\r\n        const zIndex = order ? readyStates.length - order : readyStates.length;\r\n        const isRanked = (order ?? 0) <= 2;\r\n        const isFirst = (order ?? 1) === 0;\r\n        let className: string = '';\r\n        if(readyState.ready) {\r\n            className = 'finished';\r\n        } else {\r\n            if(isRanked) {\r\n                className = IN_GAME_LEADERBOARD_CLASS_NAMES[(order ?? 0)];\r\n            }\r\n        }\r\n        return <InRoundLeaderboardEntry className={className} style={{order: order, zIndex: zIndex}}>\r\n            {\r\n                readyState.icon && buildUIIconImg('./profile_icons/', readyState.icon, isRanked ? 'ranked' : '')\r\n            }\r\n            <InRoundLeaderboardName  className={isFirst && !readyState.ready ? 'dark' : ''}>{readyState.user.username}</InRoundLeaderboardName>\r\n            <InRoundLeaderboardScore className={isFirst && !readyState.ready ? 'dark' : ''}>{readyState.user.score}</InRoundLeaderboardScore>\r\n        </InRoundLeaderboardEntry>;\r\n    }, [leaderBoardOrder, readyStates])\r\n\r\n    return <InRoundLeaderboardContainer>\r\n        {\r\n            readyStates.map(readyState => renderLeaderboardEntry(readyState))\r\n        }\r\n    </InRoundLeaderboardContainer>;\r\n}\r\n\r\n\r\n// cRankFirst: \"#ffda38\",\r\n//   cRankSecond: \"#a3a3a3\",\r\n//   cRankThird: \"#e28c1c\",\r\n\r\nconst InRoundLeaderboardContainer = styled.ul`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    width: 100%;\r\n    height: 60px;\r\n    background-color: transparent;\r\n    `;\r\n\r\nconst InRoundLeaderboardName = styled.p`\r\n    color: ${p => p.theme.cPrimaryText};\r\n    transition: color .2s;\r\n    font-size: 1em;\r\n    font-weight: bold;\r\n    padding-right: 8px;\r\n\r\n    &.dark {\r\n        color: ${p => p.theme.cLobbyBackground};\r\n    }\r\n`\r\n\r\nconst InRoundLeaderboardScore = styled.p`\r\n    color: ${p => p.theme.cTagSpecies};\r\n    padding-right: 8px;\r\n    \r\n    &.dark {\r\n        color: #c03a00;\r\n    }\r\n`\r\n\r\nconst InRoundLeaderboardEntry = styled.li`\r\n    padding: 2 0 2 0;\r\n    border-radius: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: ${p => p.theme.cBodyLight};\r\n    color: ${p => p.theme.cPrimaryText};\r\n    margin-right: 12px;\r\n\r\n    transition: background-color .2s, order 1s;\r\n\r\n    &.finished {\r\n        background-color: #125512;\r\n    }\r\n    \r\n    &.first {\r\n        background-color: #f5d85a;\r\n    }\r\n    \r\n    &.second {\r\n        background-color: #5e5e5e;\r\n    }\r\n    \r\n    &.third {\r\n        background-color: #6e4209;\r\n    }\r\n\r\n    img {\r\n        width: 30px;\r\n        height: 30px;\r\n        border-radius: 50%;\r\n        border: 2px solid ${p => p.theme.cPrimaryText};\r\n        \r\n        margin-right: 8px;\r\n\r\n        transition: border-color .2s;\r\n        &.ranked{\r\n            border-color: ${p => p.theme.cLobbyBackground};\r\n        }\r\n    }\r\n`;\r\n\r\nexport default InRoundLeaderboard;","import styled from 'styled-components';\n\nexport const TagListLabel = styled.h2`\n  margin: 10px 0px 10px 0px;\n`;\n\nexport const TagsInputContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 2fr; \n  grid-template-rows: 1fr; \n  gap: 30px 10px;\n`;\n\nexport const TagsInput = styled.div`\n  flex: 0 1 auto;\n  padding: 0px 5px 5px 0px;\n  font-size: 20px;\n  border-radius: 10px;\n\n  :focus {\n    outline: none;\n  }\n\n  input {\n    padding: 2px 2px 2px 5px;\n    border-radius: 8px;\n    height: ${p => p.theme.inputHeight};\n    font-family: Verdana, sans-serif;\n    font-size: .75em;\n    font-weight: bold;\n  }\n\n  input:focus {\n    outline: none;\n  }\n`;\n\nexport const TagsGrid = styled.div`\n  display: grid; \n  grid-template-columns: 1fr 1fr 1fr; \n  grid-template-rows: 1fr; \n  gap: 0px 20px; \n  grid-template-areas: \n      \". .\";\n\n  padding-top: 5px;\n\n  min-width: 90%;\n`;\n\nexport const TagsList = styled.div`\n  display: block;\n  background-color: #1F3C67;\n\n  flex: 1 1 auto;\n\n  border-radius: 10px;\n\n  font-size: 0.85em;\n\n  padding: ${p => p.theme.pTagList};\n`;\n","import { useState, useEffect, useMemo, useContext, useCallback } from 'react';\nimport type { ReadyUpEventDataType, ReadyUpEventDataToClientType, RequestPostEventDataToClientType, PostTagType } from '../types';\nimport { EventType } from '../types';\nimport { TagList } from './TagList';\nimport useTagListGuesser from '../useTagListGuesser';\nimport styled from 'styled-components';\nimport { ProgressBar } from './ProgressBar';\nimport InRoundLeaderboard from './InRoundLeaderboard';\nimport { TagListLabel, TagsGrid, TagsInput, TagsInputContainer, TagsList } from './TagListContainerStyles';\nimport { UserContext } from '../contexts/UserContext';\n\nconst STARTING_TIME = 30;\nconst FRAME_RATE = 60;\nconst INCORRECT_GUESS_PENALTY = 3;\n\ninterface Props {\n    tags: PostTagType[];\n    className?: string;\n};\n\nconst TagListContainerElement: React.FC<Props> = (props: Props) => {\n    const { tags, className } = props;\n    const [guess, setGuess] = useState('');\n    const [guessedTags, guessTag] = useTagListGuesser(tags);\n    const {userID, roomID, readyStates, setReadyStates, connectionManager} = useContext(UserContext);\n\n    const [generalTags, artistTags, characterTags, speciesTags] = useMemo(() => {\n        const generalTags = tags.filter(tag => tag.type === 'general');\n        const artistTags = tags.filter(tag => tag.type === 'artist');\n        const characterTags = tags.filter(tag => tag.type === 'character');\n        const speciesTags = tags.filter(tag => tag.type === 'species');\n        return [generalTags, artistTags, characterTags, speciesTags];\n    }, [tags]);\n\n    const [guessedGeneralTags, guessedArtistTags, guessedCharacterTags, guessedSpeciesTags] = useMemo(() => {\n        const guessedGeneralTags = guessedTags.filter(tag => tag.type === 'general');\n        const guessedArtistTags = guessedTags.filter(tag => tag.type === 'artist');\n        const guessedCharacterTags = guessedTags.filter(tag => tag.type === 'character');\n        const guessedSpeciesTags = guessedTags.filter(tag => tag.type === 'species');\n        return [guessedGeneralTags, guessedArtistTags, guessedCharacterTags, guessedSpeciesTags];\n    }, [guessedTags])\n\n    const [time, setTime] = useState(STARTING_TIME);\n\n    useEffect(() => {\n        const onTimerEnd = (data: ReadyUpEventDataToClientType) => {\n            console.log(console.log(`Timer ran out -- ready states: ${data.room.readyStates}`));\n            const readyStates = data.room.readyStates;\n            // populate new ready states\n            setReadyStates(readyStates);\n        }\n\n        const onNewRoundStart = (data: RequestPostEventDataToClientType) => {\n            // new round has started, so reset the timer\n            setTime(STARTING_TIME);\n        }\n\n        const unsubscribers = [\n            connectionManager.listen<ReadyUpEventDataToClientType>(EventType.enum.READY_UP, onTimerEnd),\n            connectionManager.listen<RequestPostEventDataToClientType>(EventType.enum.REQUEST_POST, onNewRoundStart),\n        ];\n\n        return () => {\n            unsubscribers.forEach(unsubscribe => unsubscribe());\n        }\n    }, [connectionManager, setReadyStates]);\n    \n    const readyForNextRound = useCallback((ready: boolean) => {\n        if(userID != null && roomID != null) {\n          console.log(`user ${userID} is ready for next round: ${ready}`);\n          const data: ReadyUpEventDataType = {type: EventType.enum.READY_UP, userID, roomID, ready};\n          connectionManager.send(data);\n        } else {\n          console.error('user finished round before room or user was created')\n        }\n      }, [connectionManager, userID, roomID]);\n\n      const myReadyState = useMemo(() => {\n        const readyState = readyStates.find(readyState => readyState.user.id === userID)\n        console.log(readyState);\n        return readyState;\n      }, [readyStates, userID]);\n\n    useEffect(() => {\n        // frame rate of 60 fps for timer\n        const timer = setInterval(() => setTime(time - (1 / FRAME_RATE)), (1000 / FRAME_RATE));\n\n        if (time <= 0 && !myReadyState?.ready) {\n            readyForNextRound(true);\n        }\n        return () => {\n            clearInterval(timer);\n        }\n    }, [myReadyState?.ready, readyForNextRound, time])\n\n\n    return (\n        <div className={className}>\n            <h1>Guess a tag!{ }</h1>\n            <TagsInputContainer>\n                <TagsInput>\n                    <form onSubmit={(e) => {\n                        e.preventDefault();\n                        const guessedCorrect = guessTag(guess);\n                        if (!guessedCorrect) {\n                            setTime(time - INCORRECT_GUESS_PENALTY);\n                        }\n                        setGuess(\"\");\n                    }}>\n                        <input type=\"text\" value={guess} onChange={(e) => setGuess(e.target.value)}\n                        />\n                    </form>\n                </TagsInput>\n                <ProgressBar percentComplete={time / STARTING_TIME * 100} totalTime={STARTING_TIME}/>\n                {/* <Timer onRoundFinish={onRoundFinish} /> */}\n            </TagsInputContainer>\n            {/* <button onClick={revealAllTags}>\n                reveal tags\n            </button>\n            <button onClick={hideAllTags}>\n                clear tags\n            </button> */}\n            <InRoundLeaderboard />\n            {/* Grid definition */}\n            <TagListLabel> General Tags </TagListLabel>\n            <TagsGrid>\n                {/* 1/3 side of grid */}\n                <TagsList>\n                    {/* Big large general tag block, takes up 1/3 of right side of screen */}\n                    <TagList tags={generalTags.slice(0, Math.ceil(generalTags.length / 3))} guessedTags={guessedGeneralTags}\n                    ></TagList>\n                </TagsList>\n                <TagsList>\n                    {/* 1 / 3 of grid */}\n                    <TagList tags={generalTags.slice(Math.ceil(generalTags.length / 3), Math.ceil(generalTags.length / 3) * 2)} guessedTags={guessedGeneralTags}></TagList>\n                </TagsList>\n                <TagsList>\n                    {/* 1 / 3 of grid */}\n                    <TagList tags={generalTags.slice(Math.ceil(generalTags.length / 3) * 2)} guessedTags={guessedGeneralTags}></TagList>\n                </TagsList>\n            </TagsGrid>\n            {/* Artist, chracter, and species tags */}\n            <TagsGrid>\n                <div>\n                    <TagListLabel> Species Tags </TagListLabel>\n                    <TagsList>\n                        <TagList tags={speciesTags} guessedTags={guessedSpeciesTags}></TagList>\n                    </TagsList>\n                </div>\n                <div>\n                    <TagListLabel> Character Tags </TagListLabel>\n                    <TagsList>\n                        <TagList tags={characterTags} guessedTags={guessedCharacterTags}></TagList>\n                    </TagsList>\n                </div>\n                <div>\n                    <TagListLabel> Artist Tags </TagListLabel>\n                    {/* Rest of the tags, stacked on top of one another. Takes up the other 1/2 side of right screen */}\n                    <TagsList>\n                        <TagList tags={artistTags} guessedTags={guessedArtistTags}></TagList>\n                    </TagsList>\n                </div>\n            </TagsGrid>\n        </div>\n    );\n};\n\nexport const TagListContainer = styled(TagListContainerElement)`\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    align-items: flex-start;\n`;","import styled from 'styled-components';\r\nimport { UserContext } from '../contexts/UserContext';\r\nimport { useContext } from 'react';\r\nimport { buildUIIconImg } from '../util/UIUtil';\r\n\r\n\r\nconst BASE_LEADERBOARD_WIDTH = 20;\r\nconst MAX_LEADERBOARD_WIDTH = 350;\r\n\r\nconst RANK_BAR_CLASS_NAMES = ['first', 'second', 'third'];\r\n\r\nfunction LeaderBoard(): JSX.Element {\r\n  /**\r\n   * Server-driven user values\r\n   */\r\n  const { readyStates } = useContext(UserContext);\r\n  readyStates.sort((readyStateA, readyStateB) => readyStateB.user.score- readyStateA.user.score);\r\n  const highestScore = readyStates[0].user.score + 1;\r\n  return (\r\n    <LeaderBoardOuterContainer>\r\n        <LeaderBoardInnerContainer>\r\n            {\r\n                readyStates.map((readyState, rank) => {\r\n                    const score = readyState.user.score;\r\n                    const username = readyState.user.username;\r\n                    const icon = readyState.user.icon;\r\n                    const rankBarWidth = (Math.floor((score / highestScore) * (MAX_LEADERBOARD_WIDTH - BASE_LEADERBOARD_WIDTH))) + BASE_LEADERBOARD_WIDTH;\r\n                    console.log(`highest score: ${highestScore}`);\r\n                    let rankBarClassName : string = '';\r\n                    if(rank <= 2) {\r\n                        rankBarClassName = RANK_BAR_CLASS_NAMES[rank];\r\n                    }\r\n                    return <LeaderBoardRank>\r\n                        <p style={{marginRight: 16}}>{rank + 1}</p>\r\n                        <LeaderBoardRankBar style={{width: rankBarWidth}} className={rankBarClassName}/>\r\n                        <LeaderBoardRankScore>{readyState.user.score}</LeaderBoardRankScore>\r\n                        <p>{username}</p>\r\n                        {\r\n                            icon && \r\n                            <LeaderBoardUserIconContainer>\r\n                                {\r\n                                    buildUIIconImg('./profile_icons/', icon)\r\n                                }\r\n                            </LeaderBoardUserIconContainer>\r\n                        }\r\n                    </LeaderBoardRank>\r\n                })\r\n            }\r\n        </LeaderBoardInnerContainer>\r\n    </LeaderBoardOuterContainer>\r\n  )\r\n}\r\n\r\nconst LeaderBoardUserIconContainer = styled.div`\r\n    border-radius: 50%;\r\n    border: 2px solid ${p => p.theme.cPrimaryText};\r\n    width: 1.5em;\r\n    height: 1.5em;\r\n    img {\r\n        width: 100%;\r\n        height: 100%;\r\n        border-radius: 50%;\r\n    }\r\n`\r\n\r\nconst LeaderBoardRankScore = styled.p`\r\n    color: ${p => p.theme.cTagSpecies};\r\n`\r\n\r\nconst LeaderBoardOuterContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst LeaderBoardInnerContainer = styled.ul`\r\n    margin: 10px;\r\n    padding: 16px;\r\n    max-width: 98vw;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 5px #000;\r\n`;\r\n\r\nconst LeaderBoardRank = styled.li`\r\n    padding: 0 6 0 6;\r\n    font-size: 2em;\r\n    color: ${p => p.theme.cPrimaryText};\r\n    \r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n\r\n    p {\r\n        margin-right: 8px;\r\n    }\r\n`\r\n\r\nconst LeaderBoardRankBar = styled.div`\r\n    background-color: ${p => p.theme.cBodyLight};\r\n    height: 1.35em;\r\n    border-radius: 4px;\r\n    margin-right: 8px;\r\n    \r\n    &.first {\r\n        background-color: ${p => p.theme.cRankFirst};\r\n    }\r\n    &.second {\r\n        background-color: ${p => p.theme.cRankSecond};\r\n    }\r\n    &.third {\r\n        background-color: ${p => p.theme.cRankThird};\r\n    }\r\n`\r\n\r\nexport default LeaderBoard;\r\n","import { DisplayedPost } from '../components/DisplayedPost';\nimport { TagListContainer } from '../components/TagListContainer';\nimport styled from 'styled-components';\nimport { UserContext } from '../contexts/UserContext';\nimport { useContext, useEffect, useState } from 'react';\nimport type { PostTagType, PostType, ShowLeaderboardEventDataToClientType, RequestPostEventDataToClientType } from '../types';\nimport { EventType } from '../types';\nimport LeaderBoard from '../components/Leaderboard';\n// TODO: ^ use this lol\n\nconst emptyTagList : PostTagType[] = [];\n\ntype Props = {\n  currentPost: PostType,\n  update: () => void,\n}\n\nfunction MainPage({currentPost, update} : Props): JSX.Element {\n  /**\n   * Server-driven user values\n   */\n  const {roomID, readyStates, connectionManager, userID, owner } = useContext(UserContext);\n  const [showLeaderboard, setShowLeaderboard] = useState(false);\n  \n  const canStartNewRound = readyStates.every(readyState => readyState.ready);\n\n  useEffect(() => {\n    const onShowLeaderboard = (data: ShowLeaderboardEventDataToClientType) => {\n      setShowLeaderboard(true);\n    }\n\n    const onStartNewRound = (data: RequestPostEventDataToClientType) => {\n      setShowLeaderboard(false);\n    }\n\n    const unsubscribers = [\n      connectionManager.listen<ShowLeaderboardEventDataToClientType>(EventType.enum.SHOW_LEADERBOARD, onShowLeaderboard),\n      connectionManager.listen<RequestPostEventDataToClientType>(EventType.enum.REQUEST_POST, onStartNewRound),\n    ];\n\n    return () => {\n      unsubscribers.forEach(unsubscribe => unsubscribe());\n    }\n  }, [connectionManager])\n\n  const startNewRound = () => {\n    if(canStartNewRound) {\n      update();\n    }\n  }\n\n  const shouldShowLeaderboard = roomID != null && !showLeaderboard;\n\n  return (\n    <div>\n      {\n        shouldShowLeaderboard ? <MediaContainer>\n        {\n          currentPost && <>\n            {/* Delete this wrapper div once done. Only here so that Next Post is under it */}\n            <DisplayedPost post={currentPost} />\n            {/* pass in an empty TagList placeholder if there's no post */}\n            <TagListContainer tags={currentPost ? currentPost.tags : emptyTagList} />\n          </> \n        }\n        <button onClick={startNewRound}>\n          next round\n        </button>\n      </MediaContainer> : <LeaderBoardPageView>\n          <LeaderBoard />\n          {\n            userID === owner?.id && <NextRoundButton onClick={startNewRound}>Start Next Round</NextRoundButton>\n          }\n      </LeaderBoardPageView>\n      }\n    </div>\n  )\n}\n\nconst LeaderBoardPageView = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst NextRoundButton = styled.button`\n  color: ${p => p.theme.cTagCharacter};\n  border: 4px solid ${p => p.theme.cTagCharacter};\n  border-radius: 12px;\n  background-color: transparent;\n\n  font-size: 1.25em;\n  font-weight: bold;\n  padding: 12px;\n  transition: background-color .2s, color .2s, transform .2s;\n\n  &:hover {\n    transform: scale(125%);\n    background-color: ${p => p.theme.cTagCharacter};\n    color: ${p => p.theme.cLobbyBackground};\n  }\n\n  &:focus {\n    transform: scale(105%);\n  }\n`\n\nconst MediaContainer = styled.div`\n  display: grid; \n  grid-template-columns: 1fr 1fr; \n  grid-template-rows: 1fr; \n  gap: 30px 0px; \n  grid-template-areas: \n      \". .\";\n`;\n\nexport default MainPage;\n","import { UserContext } from '../contexts/UserContext';\r\nimport { useContext, useState, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport type { GetSelectedIconsEventDataType, GetSelectedIconsEventDataToClientType, SetUserIconEventDataType, SetUserIconEventDataToClientType } from '../types';\r\nimport { EventType } from '../types';\r\nimport { icons, buildUIIconImg } from '../util/UIUtil';\r\nimport type {IconData} from '../util/UIUtil';\r\n\r\ntype Props = {\r\n  className?: string;\r\n  allIcons: IconData[];\r\n}\r\n\r\nconst IconPicker: React.FC<Props> = ({allIcons} : Props) => {\r\n  const [selectedIcons, setSelectedIcons] = useState<string[]>([]);\r\n  const {userID, roomID, icon, setIcon, connectionManager, readyStates, setReadyStates} = useContext(UserContext);\r\n\r\n  useEffect(() => {\r\n    const onIconSelected = (data: SetUserIconEventDataToClientType) => {\r\n        const {icon, pastIcon } = data;\r\n        const iconSetterUserID = data.userID;\r\n        let newSelectedIcons = icon ? [...selectedIcons, icon] : [...selectedIcons];\r\n        if(pastIcon) {\r\n            newSelectedIcons = newSelectedIcons.filter(selectedIcon => selectedIcon !== pastIcon);\r\n        }\r\n        setSelectedIcons(newSelectedIcons);\r\n        const userToChangeIcon = readyStates.find(readyState => readyState.user.id === iconSetterUserID);\r\n        if(userToChangeIcon && icon) {\r\n            userToChangeIcon.icon = icon;\r\n            setReadyStates([...readyStates])\r\n        }\r\n    }\r\n\r\n    const onAllSelectedIcons = (data: GetSelectedIconsEventDataToClientType) => {\r\n      console.log('setting initially selected icons');\r\n      const newSelectedIcons = data.selectedIcons;\r\n      console.log(newSelectedIcons);\r\n      setSelectedIcons(newSelectedIcons);\r\n    }\r\n\r\n    const unsubscribers = [\r\n        connectionManager.listen<SetUserIconEventDataToClientType>(EventType.enum.SET_ICON, onIconSelected),\r\n        connectionManager.listen<GetSelectedIconsEventDataToClientType>(EventType.enum.GET_SELECTED_ICONS, onAllSelectedIcons),\r\n    ];\r\n\r\n    return () => {\r\n        unsubscribers.forEach(unsubscribe => unsubscribe());\r\n    }\r\n  }, [connectionManager, readyStates, selectedIcons, setReadyStates, setSelectedIcons]);\r\n\r\n  const selectIcon = (gameIcon: string) => {\r\n    if(userID && roomID && !selectedIcons.includes(gameIcon)) {\r\n        const data: SetUserIconEventDataType = {type: EventType.enum.SET_ICON, userID, roomID, icon: gameIcon}\r\n        setIcon(gameIcon);\r\n        connectionManager.send(data);\r\n    }\r\n  }\r\n\r\n  const getSelectedIcons = useCallback(() => {\r\n    if(roomID) {\r\n      const data : GetSelectedIconsEventDataType = {type: EventType.enum.GET_SELECTED_ICONS, roomID};\r\n      connectionManager.send(data);\r\n    }\r\n  }, [connectionManager, roomID])\r\n\r\n  useEffect(() => {\r\n    // get selected icons on mount\r\n    console.log('getting initial selected icons...')\r\n    getSelectedIcons();\r\n  }, [getSelectedIcons])\r\n\r\n  return (\r\n        <IconList>\r\n          {\r\n            icons.map((gameIcon) => {\r\n                let buttonClass;\r\n                if(icon === gameIcon.file) {\r\n                    buttonClass = 'selected';\r\n                } else {\r\n                    if(selectedIcons.includes(gameIcon.file)) {\r\n                        buttonClass = 'disabled';\r\n                    } else {\r\n                        buttonClass = 'selectable';\r\n                    }\r\n                }\r\n                return <li className={buttonClass}>\r\n                  <CharacterName>{gameIcon.character}</CharacterName>\r\n                  <button onClick={() => selectIcon(gameIcon.file)}>{buildUIIconImg('./profile_icons/', gameIcon.file)}</button>\r\n                  <IconArtist href={gameIcon.source}>\r\n                    <span style={{color: '#b4c7d9'}}>art by </span>\r\n                    {gameIcon.artist}\r\n                    </IconArtist>\r\n                  </li>;\r\n            })\r\n          }\r\n        </IconList>\r\n  );\r\n}\r\n\r\n// TODO: artist credit\r\nconst IconArtist = styled.a`\r\n  opacity: 0;\r\n  transition: opacity .2s;\r\n  text-decoration: none;\r\n  &:hover {\r\n    opacity: 1\r\n  }\r\n\r\n  &:focus {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst CharacterName = styled.p`\r\n  font-size: 1rem;\r\n  color: #b4c7d9;\r\n  z-index: 4;\r\n`\r\n\r\nconst IconList = styled.ul`\r\n  grid-area: 'icons';\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr 1fr 1fr;\r\n  margin-top: 32;\r\n\r\n  li {\r\n    position: relative;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n\r\n    padding: 8px;\r\n\r\n    transition: filter .2s, transform .2s;\r\n    &.disabled {\r\n        filter: brightness(40%);\r\n    }\r\n\r\n    &.selected {\r\n        filter: brightness(115%);\r\n        transform: scale(1.25);\r\n        z-index: 3;\r\n    }\r\n\r\n    &.selectable {\r\n        filter: brightness(75%);\r\n        vertical-align: middle;\r\n        border-radius: 50%;\r\n    }\r\n\r\n    &.selectable:hover {\r\n        transform: scale(1.5);\r\n        filter: brightness(115%); \r\n        z-index: 99\r\n    }\r\n\r\n    &.selectable:focus {\r\n        transform: scale(1.25);\r\n        filter: brightness(115%);\r\n    }\r\n\r\n    a {\r\n      opacity: 0;\r\n      transition: opacity .2s;\r\n    }\r\n\r\n    &:hover {\r\n      a {\r\n        opacity: 1;\r\n      }\r\n    }\r\n\r\n    button {\r\n        background-color: transparent;\r\n        border: none;\r\n        box-shadow: 0;\r\n        text-shadow: 0;\r\n      img {\r\n        width: 70px;\r\n        height: 70px;\r\n        border: 5px solid ${p => p.theme.cBodyLight};\r\n        border-radius: 50%;\r\n      }\r\n    }\r\n\r\n    a {\r\n      opacity: 0;\r\n      transition: opacity .2s;\r\n      &:hover {\r\n        opacity: 1\r\n      }\r\n\r\n      &:focus {\r\n        opacity: 0.5;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default IconPicker;","export default __webpack_public_path__ + \"static/media/e6TagGameMascot.2884d1c1.png\";","import { UserContext } from '../contexts/UserContext';\nimport { useContext, useMemo, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { TitleText, } from '../components/StyledElements';\nimport type {JoinRoomEventDataToClientType, LeaveRoomEventDataType, LeaveRoomEventDataToClientType, ReadyUpEventDataType, ReadyUpEventDataToClientType, RequestPostEventDataType, UserReadyStateType } from '../types';\nimport { EventType } from '../types';\nimport MainPage from './MainPage';\nimport IconPicker from '../components/IconPicker';\nimport { icons, buildUIIconImg } from '../util/UIUtil';\nimport usePostFetcher from '../usePostFetcher';\nimport {\n  useNavigate,\n} from 'react-router-dom';\n\nimport reg from '../images/e6TagGameMascot.png';\n\ntype Props = {\n  className?: string;\n}\n\nexport const ReadyUp : React.FC<Props> = ({className}: Props) => {\n  /**\n   * Server-driven user values\n   */\n  const {userID, username, roomID, readyStates, owner, setOwner, setReadyStates, leaveRoomCleanup, connectionManager} = useContext(UserContext);\n  const { currentPost, update } = usePostFetcher(connectionManager, roomID);\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    const onNewUserJoin = (data: JoinRoomEventDataToClientType) => {\n      console.log(`${data.user.username} has joined the room`);\n      const user = data.user;\n      const newReadyStates = [...readyStates, {user, ready: false}];\n      setReadyStates(newReadyStates);\n    }\n    \n    const onNewReadyStates = (data: ReadyUpEventDataToClientType) => {\n      console.log(console.log(`ready up updated -- ready states: ${data.room.readyStates}`));\n      const readyStates = data.room.readyStates;\n      // populate new ready states\n      setReadyStates(readyStates);\n    }\n\n    const onUserLeftRoom = (data: LeaveRoomEventDataToClientType) => {\n      console.log('Someone left the room...')\n      const newReadyStates = data.room.readyStates;\n      const newOwner = data.room.owner;\n      if(!owner) {\n        setOwner(newOwner);\n      } else {\n        if(owner.id !== newOwner.id) {\n          setOwner(newOwner);\n        }\n      }\n      setReadyStates(newReadyStates);\n\n    }\n\n    // orchestrate game start\n    const unsubscribers = [\n        connectionManager.listen<ReadyUpEventDataToClientType>(EventType.enum.READY_UP, onNewReadyStates),\n        connectionManager.listen<JoinRoomEventDataToClientType>(EventType.enum.JOIN_ROOM, onNewUserJoin),\n        connectionManager.listen<LeaveRoomEventDataToClientType>(EventType.enum.LEAVE_ROOM, onUserLeftRoom),\n    ];\n\n    return () => {\n        unsubscribers.forEach(unsubscribe => unsubscribe());\n    }\n}, [connectionManager, owner, readyStates, setOwner, setReadyStates])\n\n  const readyUp = useCallback((ready: boolean) => {\n    if(userID != null && roomID != null) {\n      console.log(\"readying up\");\n      const data: ReadyUpEventDataType = {type: EventType.enum.READY_UP, userID, roomID, ready};\n      connectionManager.send(data);\n    } else {\n      console.error('user readied up before room or user was created')\n    }\n  }, [connectionManager, userID, roomID]);\n\n  const canStartGame = useMemo(() => readyStates.every(readyState => readyState.ready && readyState.icon), [readyStates]);\n\n  const startGame = useCallback(() => {\n    if(roomID && userID && userID === owner?.id && canStartGame) {\n      const data: RequestPostEventDataType = {type: EventType.enum.REQUEST_POST, roomID, userID};\n      connectionManager.send(data);\n    }\n  }, [roomID, userID, owner?.id, canStartGame, connectionManager]);\n\n  const leaveRoom = useCallback(() => {\n    console.log(`${username ?? 'NO USERNAME'} is leaving the room`);\n    if(roomID && userID) {\n      const data: LeaveRoomEventDataType = {type: EventType.enum.LEAVE_ROOM, userID, roomID};\n      connectionManager.send(data);\n      leaveRoomCleanup();\n    }\n    document.body.style.backgroundImage = `url(${reg})`;\n    navigate(\"/\");\n  }, [connectionManager, leaveRoomCleanup, navigate, roomID, userID, username]);\n\n  const renderLobbyUserIcon = useCallback((userIcon?: string) => {\n    if(userIcon) {\n      return (\n        <div style={{gridArea: 'icon'}} className='icon-chosen'>\n          {buildUIIconImg('./profile_icons/', userIcon)}\n        </div>\n      )\n    }\n    return (\n      <div style={{gridArea: 'icon'}} className='icon-unchosen'>\n        <p>?</p>\n      </div>\n    )\n  }, [])\n\n  // TODO: make pretty\n  const renderReadyState = useCallback((readyState: UserReadyStateType) => {\n    const readyUpOnClick = () => readyUp(!readyState.ready);\n    const readyUpButtonClassName = readyState.ready ? 'ready-down' : 'ready-up';\n    const readyUpButtonText = readyState.ready ? 'Ready Down' : 'Ready Up';\n    const readyUpButton = <ReadyUpButton onClick={readyUpOnClick} className={readyUpButtonClassName}>{readyUpButtonText}</ReadyUpButton>\n    return(\n      <li>\n        {\n          renderLobbyUserIcon(readyState.icon)\n        }\n        <div style={{gridArea: 'username'}} className='username-container'>\n          <p>\n              {readyState.user.username}\n          </p>\n        </div>\n        <div style={{gridArea: 'ready-up-button'}}>\n          {\n            userID === readyState.user.id ? readyUpButton : <ReadyStatus className={readyState.ready ? 'ready' : 'not-ready'}>{readyState.ready ? 'Ready!' : 'Waiting'}</ReadyStatus>\n          }\n        </div>\n      </li>\n    );\n  }, [readyUp, renderLobbyUserIcon, userID]);\n\n  const roomName = `${owner?.username ?? 'Uknown User'}'s Room`;\n  return currentPost ? <MainPage currentPost={currentPost} update={update}/> : (\n    <ReadyUpView>\n      <UsersInLobbyContainer style={{gridArea: 'ready-up'}}>\n        <ReadyUpContainer style={{width: '50%'}}>\n            <TitleText>\n                {roomName}\n            </TitleText>\n            <ReadyUpList>\n                {\n                    readyStates.map(readyState => renderReadyState(readyState))\n                }  \n            </ReadyUpList>\n        </ReadyUpContainer>\n      </UsersInLobbyContainer>\n      <ReadyUpContainer style={{gridArea: 'icons'}}>\n        <IconPicker allIcons={icons}/>\n      </ReadyUpContainer>\n      {\n        <StartGameContainer style={{gridArea:'start-game'}}>\n          {\n            roomID && userID && <RoomUpdateButton className={'leave'} onClick={leaveRoom}>Leave Room</RoomUpdateButton>\n          }\n          {\n            owner && userID === owner.id && <RoomUpdateButton onClick={startGame}>Start Game</RoomUpdateButton>\n          }\n      </StartGameContainer>\n      }\n    </ReadyUpView> \n    );\n}\n\nconst ReadyStatus = styled.p`\n  transition: color .2s;\n  &.ready {\n    color: ${p => p.theme.cTagCharacter};\n  }\n\n  &.not-ready {\n    color: ${p => p.theme.cTagSpecies};\n  }\n`\n\nconst ReadyUpButton = styled.button`\n  width: 120px;\n  height: 40px;\n  &.ready-up {\n    color: ${p => p.theme.cTagCharacter};\n    background-color: ${p => p.theme.cTagCharacter};\n    border:2px solid ${p => p.theme.cTagCharacter};\n    background-color: transparent;\n    \n    &:hover {\n      background-color: ${p => p.theme.cTagCharacter};\n    }\n  }\n\n  &.ready-down {\n    color: ${p => p.theme.cTagSpecies};\n    background-color: ${p => p.theme.cTagSpecies};\n    border:2px solid ${p => p.theme.cTagSpecies};\n    background-color: transparent;\n\n    &:hover {\n      background-color: ${p => p.theme.cTagSpecies};\n    }\n  }\n`\n\nconst RoomUpdateButton = styled.button`\n  width: 140px;\n  min-height: 40px;\n  border:2px solid ${p => p.theme.cPrimaryText};\n  background-color: transparent;\n  \n  font-size: 1em;\n  font-weight: bold;\n  color: ${p => p.theme.cPrimaryText};\n\n  &.leave {\n    border:2px solid ${p => p.theme.cTagSpecies};\n    color: ${p => p.theme.cTagSpecies};\n    margin-right: 24px;\n    &:hover {\n      background-color: ${p => p.theme.cTagSpecies};\n    }\n  }\n\n  &:hover {\n    background-color: ${p => p.theme.cPrimaryText};\n  }\n`\n\nconst StartGameContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: flex-start;\n  margin-top: 12px;\n`\n\nconst UsersInLobbyContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`\n\nconst ReadyUpList = styled.ul`\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: left;\n\n    li {\n        display: grid;\n        grid-template-columns: 1fr 2fr 1fr;\n        grid-template-areas: 'icon username ready-up-button';\n        column-gap: 1rem;\n        border-radius: 4px;\n        width: calc(100% - 4rem);\n        padding: 0 1rem 0.25rem 1rem;\n\n        font-size: 1em;\n        font-weight: bold;\n\n        div {\n          transition: border 0.2s;\n\n          display: flex;\n          flex-direction: row;\n          justify-content: center;\n          align-items: center;\n\n          &.icon-unchosen {\n            border-radius: 50%;\n            width: 40px;\n            height: 40px;\n            border: 2px dashed ${p => p.theme.cPrimaryText};\n            background-color: transparent;\n\n            color: ${p => p.theme.cPrimaryText};\n\n            text-shadow: none;\n          }\n\n          &.icon-chosen {\n            border-radius: 50%;\n            border: 2px solid ${p => p.theme.cPrimaryText};\n            width: 40px;\n            height: 40px;\n            img {\n              width: 40px;\n              height: 40px;\n              border-radius: 50%;\n            }\n          }\n        }\n    }\n`;\n\nconst ReadyUpContainer = styled.div`\n    margin: 10px;\n    padding: 2px 0 16px 0;\n    max-width: 98vw;\n    border-radius: 5px;\n    box-shadow: 0 0 5px #000;\n    text-shadow: 0 0 2px black, 0 0 6px black;\n    z-index: 2;\n`\n\nconst ReadyUpView = styled.div`\n  text-align: center;\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: 1fr 2fr 2fr 1fr;\n  grid-template-areas: \n  '. . .'\n  '. ready-up .'\n  '. icons .'\n  '. start-game .';\n  column-gap: 1rem;\n\n  button {\n    transition: background-color .2s, transform .2s, color .2s, border .2s;\n    border-radius: 10%;\n    font-size: 1em;\n    font-weight: bold;\n  }\n\n  button:hover {\n    transform: scale(125%);\n    color:  ${p => p.theme.cLobbyBackground};\n  }\n`\n\nexport default ReadyUp;\n","import { useState, useEffect, useContext } from 'react';\nimport { ConnectionManager } from './util/ConnectionManager';\nimport { UserContext } from './contexts/UserContext';\nimport type { PostType, RequestPostEventDataToClientType, RequestPostEventDataType} from './types';\nimport { EventType } from './types';\n\n// custom hook, returns an object that has the CurrentPost, and an update callback function that we define\nexport default function usePostFetcher(connectionManager: ConnectionManager, roomID?: string) : {\n    currentPost: PostType | null;\n    update: () => Promise<void>;\n  } {\n    // want component re-rendering when this changes\n    const [currentPost, setCurrentPost] = useState<PostType | null>(null);\n    const {userID, readyStates, setReadyStates} = useContext(UserContext);\n  \n    // run update once on mount\n    useEffect( () => {\n      const onRequestPost = (data: RequestPostEventDataToClientType) => {\n        const newPost = data.post;\n        if(newPost != null) {\n          newPost.tags.sort((a, b) => b.score - a.score);\n          setCurrentPost(newPost);\n          // reset client side ready states to false\n          const newReadyStates = readyStates.map(readyState => ({...readyState, ready: false}))\n          setReadyStates(newReadyStates);\n        }\n      }\n      const unsubscribers = [connectionManager.listen<RequestPostEventDataToClientType>(EventType.enum.REQUEST_POST, onRequestPost)];\n\n      return () => {\n        unsubscribers.forEach(unsubscribe => unsubscribe());\n      }\n    }, [connectionManager, readyStates, setReadyStates]);\n\n    // define what the update callback will be\n    async function update() {\n      if(roomID != null && userID != null) {\n        const data: RequestPostEventDataType = {type: EventType.enum.REQUEST_POST, roomID: roomID, userID: userID}\n        connectionManager.send(data);\n      }\n    }\n    return { currentPost, update };\n  }","import React, { useContext, useCallback, useState, useEffect} from 'react';\nimport { UserContext } from '../contexts/UserContext';\nimport styled from 'styled-components';\nimport type { ClientRoomType, SetUsernameEventDataToClientType, JoinRoomEventDataToClientType, AllRoomsEventDataToClientType, SetUsernameEventDataType, CreateRoomEventDataType, AllRoomsEventDataType, JoinRoomEventDataType } from '../types';\nimport { EventType } from '../types';\nimport {\n    useNavigate,\n} from 'react-router-dom';\nimport { Container, List, Header, TitleText, TitleContainer } from '../components/StyledElements';\n\n\ntype Props = {\n    className?: string\n}\n\nexport const Lobby: React.FC<Props> = ({className}: Props) => {\n    const {roomID, setRoomID, userID, setUserID, setUsername, setReadyStates, setOwner, username, connectionManager} = useContext(UserContext);\n    const [usernameInput, setUsernameInput] = useState<string>('');\n    const [rooms, setRooms] = useState<ClientRoomType[]>([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const onJoinRoom = (data: JoinRoomEventDataToClientType) => {\n          console.log(`user: ${data.user.id} has joined room: ${data.room.roomID}`);\n          setRooms([data.room, ...rooms]);\n          // if the update was for this room that we are in, then update the owner\n          if(userID === data.user.id) {\n              setRoomID(data.room.roomID);\n              setReadyStates(data.room.readyStates);\n              setOwner(data.room.owner)\n              console.log(`set owner to ${data.room.owner.username}`);\n            }\n            \n            if(userID === data.user.id) {\n                navigate(\"/play\");\n                document.body.style.backgroundImage = 'none';\n            }\n        }\n        const onAllRooms = (data: AllRoomsEventDataToClientType) => {\n            setRooms(data.rooms);\n        }\n\n        const onSetUsername = (data: SetUsernameEventDataToClientType) => {\n            if(!userID) {\n                console.log(`Setting username to: ${data.user.id}`);\n                setUserID(data.user.id);\n            }\n            setUsername(data.user.username);\n        }\n        // orchestrate game start\n        const unsubscribers = [\n            connectionManager.listen<JoinRoomEventDataToClientType>(EventType.enum.JOIN_ROOM, onJoinRoom),\n            connectionManager.listen<AllRoomsEventDataToClientType>(EventType.enum.ALL_ROOMS, onAllRooms),\n            connectionManager.listen<SetUsernameEventDataToClientType>(EventType.enum.SET_USERNAME, onSetUsername)\n        ];\n\n        return () => {\n            unsubscribers.forEach(unsubscribe => unsubscribe());\n        }\n    }, [connectionManager, navigate, roomID, rooms, setOwner, setReadyStates, setRoomID, setUserID, setUsername, userID]);\n\n    \n    const createUsername = useCallback((username: string) => {\n        const data: SetUsernameEventDataType = {type: EventType.enum.SET_USERNAME, userID, username};\n        connectionManager.send(data);\n        console.log(\"setting username to \", username);\n    }, [connectionManager, userID]);\n\n    const createRoom = useCallback(() => {\n        console.log(userID);\n        if(userID) {\n            const data: CreateRoomEventDataType = {type: EventType.enum.CREATE_ROOM, userID: userID};\n            connectionManager.send(data);\n            console.log(\"creating room\");\n        }\n    }, [connectionManager, userID]);\n\n    const joinRoom = useCallback((roomID: string) => {\n        console.log(`JOINING ROOM ${roomID} FUCKING HELL`);\n        console.log(`userId: ${userID}`);\n        if(userID) {\n            const data: JoinRoomEventDataType = {type: EventType.enum.JOIN_ROOM, roomID, userID};\n            connectionManager.send(data);\n        }\n    }, [connectionManager, userID]);\n\n    const getAllRooms = useCallback(() => {\n        const data : AllRoomsEventDataType = {type: EventType.enum.ALL_ROOMS};\n        connectionManager.send(data);\n    }, [connectionManager])\n    \n    useEffect(() => {\n        getAllRooms();\n    }, [getAllRooms])\n\n    const renderRoom = useCallback((room: ClientRoomType) => {\n        const {roomID, readyStates, owner} = room;\n        return (\n            <li key={roomID} style={{paddingTop: 4}}>\n                <RoomNameContainer>\n                    <p>\n                        {`${owner.username}'s Room`}\n                    </p>\n                </RoomNameContainer>\n                <JoinRoomButton onClick={() => joinRoom(room.roomID)} className={'joinable'}>\n                    Join!\n                </JoinRoomButton>\n                <ReadyUpStatesContainer>\n                    {\n                        readyStates.map(readyState => {\n                            return <ReadyUpState className={readyState.ready ? 'ready' : ''}/>\n                        })\n                    }\n                </ReadyUpStatesContainer>\n            </li>\n        )\n    }, [joinRoom]);\n\n    const renderSignUp = () => {\n        if(!username) {\n            return <Container>\n                <BlurredImage style={{gridArea: 'e6-join', paddingBottom: 12}}>\n                    <TitleText>\n                        e621 Tag Feud\n                    </TitleText>\n                    <InfoBar>\n                        <a href=\"https://github.com/Zaverose/e621-tag-feud\">contribute</a>\n                        <a href=\"https://twitter.com/zaverose_nsfw\">twitter</a>\n                    </InfoBar>\n                    <label form=\"roomIDForm\">\n                            Log in wtih a username\n                    </label>\n                    <form id=\"roomIDForm\" style={{paddingTop: 8}}onSubmit={(e) => {\n                    e.preventDefault();\n                    createUsername(usernameInput);\n                }}>\n                    <Input \n                    type=\"text\" \n                    placeholder=\"enter a username here\"\n                    size={30}\n                    value={usernameInput} \n                    onChange={(e) => setUsernameInput(e.target.value)}/>\n                    </form>\n                    <form id=\"roomIDForm\" style={{paddingTop: 4, marginBottom: 4}}onSubmit={(e) => {\n                    e.preventDefault();\n                    createUsername(usernameInput);\n                }}>\n            </form>\n            <input type=\"submit\" style={{marginRight: 8}} value=\"Set Username\" form=\"roomIDForm\"/>\n            </BlurredImage>\n        </Container>\n        }\n        return <Container>\n            <BlurredImage style={{gridArea: 'e6-join', paddingBottom: 12}}>\n        <TitleText>\n            e621 Tag Feud\n        </TitleText>\n        <h1 style={{marginTop: 0}}>Create a Room!</h1>\n        <button onClick={createRoom}>\n        Create Room\n        </button>\n        <InfoBar style={{paddingTop: 8}}>\n            <p>Art by <a href=\"https://twitter.com/zaverose_nsfw/status/1462674512017723395\">Zaverose</a></p>\n        </InfoBar>\n    </BlurredImage>\n    <BlurredImage style={{gridArea: 'e6-create', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n        <InfoBar>\n            <a href=\"https://github.com/Zaverose/e621-tag-feud\">contribute</a>\n            <a href=\"https://twitter.com/zaverose_nsfw\">twitter</a>\n        </InfoBar>\n    </BlurredImage>\n    <TitleContainer style={{gridArea: 'rooms', width: 'auto', marginLeft: '1rem', marginRight: '1rem'}}>\n        <TitleText>\n            Joinable Rooms\n        </TitleText>\n        <List>\n            <Header>\n                <p>room name</p>\n                <p></p>\n                <p>users</p>\n            </Header>\n            {\n                rooms.map(room => renderRoom(room))\n            }  \n        </List>\n    </TitleContainer>\n    </Container>;\n    }\n\n    return renderSignUp();\n}\n\nconst ReadyUpStatesContainer = styled.div`\n    display: flex;\n`\n\nconst RoomNameContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n`\n\nconst ReadyUpState = styled.div`\n    height: 25px;\n    width: 25px;\n    border: 2px solid ${p => p.theme.cTagCharacter};\n    border-radius: 50%;\n    background-color: transparent;\n    transition: background-color .2s;\n    &.ready {\n        background-color: ${p => p.theme.cTagCharacter};\n    }\n`\n\nconst JoinRoomButton = styled.button`\n    transition: color .2s, background-color .2s;\n    border-radius: 25%;\n  &.joinable {\n    color: ${p => p.theme.cTagCharacter};\n    background-color: ${p => p.theme.cTagCharacter};\n    border:2px solid ${p => p.theme.cTagCharacter};\n    background-color: transparent;\n    \n    &:hover {\n      background-color: ${p => p.theme.cTagCharacter};\n      color: ${p => p.theme.cBodyLight}\n    }\n  }\n\n  &.unjoinable {\n    color: ${p => p.theme.cTagSpecies};\n    background-color: ${p => p.theme.cTagSpecies};\n    border:2px solid ${p => p.theme.cTagSpecies};\n    filter: brightness(50%);\n  }\n`\n\nconst Input = styled.input`\n    border-radius: 4px;\n    padding: 1px 2px;\n    cursor: text;\n\n    :focus {\n        background: #ffc;\n        color: #000;\n        outline: none;\n    }\n`\n\nconst InfoBar = styled.div`\n    \n`;\n\n// const RoomsView = styled(TitleView)`\n//     /* height: 28rem; */\n//     /* width: calc(100% - 10rem); */\n//     /* margin-right: 80px; */\n//     /* margin-left: 20px; */\n// `;\n\nconst BlurredImage = styled(TitleContainer)`\n    background-color: ${p => p.theme.cLobbyBackground};\n    background-image: url('${p => p.theme.bgImageBlur}');\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: 50% 0%;\n    background-size: 30%;\n    backdrop-filter: blur(8px);\n`","export default __webpack_public_path__ + \"static/media/e6TagGameMascotBlur.ba63271a.png\";","import reg from '../../images/e6TagGameMascot.png';\nimport blur from '../../images/e6TagGameMascotBlur.png';\n\n/**\n * Theme for the application. Update with variables as needed!\n * Accessible via: ${props => props.theme.<name>} within a styled component.\n */\nconst Theme = {\n  // colors\n  cBodyLight: \"#1F3C67\",\n  cTagArtist: \"#F2AC08\",\n  cTagCharacter: \"#00AA00\",\n  cTagSpecies: \"#ED5D1F\",\n  cLobbyBackground: \"rgb(0, 45, 85)\",\n  cPrimaryText: \"#b4c7d9\",\n  cRankFirst: \"#ffda38\",\n  cRankSecond: \"#a3a3a3\",\n  cRankThird: \"#e28c1c\",\n\n  // image paths\n  bgImage: reg,\n  bgImageBlur: blur,\n  \n  // padding\n  pTagList: \"10px\",\n\n  // margin\n  mTag: \"8px\",\n\n  // height\n  inputHeight: \"25px\"\n}\n\nexport default Theme;","import { createGlobalStyle } from \"styled-components\";\nimport Theme from \"./Theme\";\n\nconst GlobalStyles = createGlobalStyle<{ theme: typeof Theme }>`\n  img {\n    max-width: 100%;\n    height: auto;\n    border-radius: inherit;\n  }\n\n  body {\n    margin: 0;\n    background-color: ${p => p.theme.cLobbyBackground};\n    font-family: Verdana, sans-serif;\n    color: white;\n    background-image: url('${p => p.theme.bgImage}');\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: 50% 0%;\n    background-size: 30%;\n  }\n\n  ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  h1 {\n    font-size: 2em;\n    margin: 13px 0 5px 0;\n  }\n\n  h2 {\n    font-size: 1.5em;\n    margin: 0;\n  }\n\n  p {\n    margin: 0;\n  }\n`;\n\nexport default GlobalStyles;","import ReadyUp from './pages/ReadyUp';\nimport { UserContext } from './contexts/UserContext';\nimport type { UserType, UserReadyStateType } from './types';\nimport { useState } from 'react';\nimport { ConnectionManager } from './util/ConnectionManager';\nimport { Routes, Route } from 'react-router-dom';\nimport { Lobby } from './pages/Lobby';\nimport { ThemeProvider } from 'styled-components';\nimport theme from './styles/theme/Theme';\nimport GlobalStyles from './styles/theme/GlobalTheme';\n\nconst connectionManager = ConnectionManager.getInstance();\n\nfunction App(): JSX.Element {\n  const [username, setUsername] = useState<string | undefined>();\n  const [userID, setUserID] = useState<string | undefined>();\n  const [score, setScore] = useState(0);\n  const [roomID, setRoomID] = useState<string | undefined>();\n  const [readyStates, setReadyStates] = useState<UserReadyStateType[]>([]);\n  const [icon, setIcon] = useState<string | undefined>();\n  const [owner, setOwner] = useState<UserType | undefined>();\n\n  const leaveRoomCleanup = () => {\n    setRoomID(undefined);\n    setScore(0);\n    setReadyStates([]);\n    setIcon(undefined);\n    setOwner(undefined);\n  }\n\n  const value = {\n    username, \n    userID, \n    score, \n    roomID, \n    icon, \n    readyStates, \n    owner, \n    setUsername, \n    setUserID, \n    setScore, \n    setRoomID, \n    setIcon, \n    setReadyStates, \n    setOwner, \n    leaveRoomCleanup, \n    connectionManager\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <UserContext.Provider value={value}>\n        <GlobalStyles />\n        <Routes>\n          <Route path=\"/\" element={<Lobby />} />\n          <Route path=\"/play\" element={<ReadyUp />} />\n        </Routes>\n      </UserContext.Provider>\n    </ThemeProvider>\n  )\n}\n// comment\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nconst root = createRoot(\n  document.getElementById('root')!\n);\n\nroot.render(\n  <BrowserRouter>\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n  </BrowserRouter>\n);\n"],"sourceRoot":""}