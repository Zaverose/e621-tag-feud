{"version":3,"sources":["util/EventManager.ts","util/ConnectionManager.ts","contexts/UserContext.ts","components/StyledElements.tsx","types.ts","components/DisplayedPost.tsx","components/VisibleTagName.tsx","components/VisibleTagScore.tsx","components/VisibleTag.tsx","components/TagList.tsx","useTagListGuesser.tsx","components/ProgressBar.tsx","util/UIUtil.tsx","components/InRoundLeaderboard.tsx","components/TagListContainerStyles.tsx","components/TagListContainer.tsx","components/Leaderboard.tsx","pages/MainPage.tsx","components/IconPicker.tsx","images/e6TagGameMascot.png","pages/ReadyUp.tsx","usePostFetcher.tsx","pages/Lobby.tsx","images/e6TagGameMascotBlur.png","styles/theme/Theme.ts","styles/theme/GlobalTheme.tsx","App.tsx","index.tsx"],"names":["EventManager","events","this","Map","event_name","callback","get","set","Set","add","delete","data","has","console","log","forEach","handler","URL","ConnectionManager","socket","eventManager","queue","connecting","WebSocket","onopen","send","onmessage","event","JSON","parse","dispatch","type","onclose","code","listen","push","stringify","close","instance","UserContext","createContext","score","connectionManager","getInstance","readyStates","setUserID","userID","setUsername","username","setRoomID","roomID","setScore","setIcon","icon","setOwner","owner","setReadyStates","leaveRoomCleanup","TitleContainer","styled","div","List","ul","p","theme","cBodyLight","Header","span","TitleText","h1","Container","EventType","z","enum","TagType","Tag","object","name","string","number","Post","id","url","tags","array","User","optional","UserReadyState","members","postQueue","postsViewedThisRound","allUsersReady","map","boolean","gameStarted","literal","CREATE_ROOM","JOIN_ROOM","LEAVE_ROOM","user","tag","GUESS_TAG","SET_USERNAME","SET_ICON","GET_SELECTED_ICONS","REQUEST_POST","ready","READY_UP","START_GAME","ALL_ROOMS","ClientRoom","room","rooms","pastIcon","selectedIcons","post","SHOW_LEADERBOARD","DisplayedPost","props","className","style","marginBottom","src","alt","VisibleTagName","tagType","VisibleTagScore","cTagCharacter","VisibleTag","HiddenTag","mTag","TagList","guessedTags","includes","alias_data","useTagListGuesser","startingTags","useState","setGuessedTags","hiddenTags","setHiddenTags","useContext","useEffect","handleGuess","useCallback","guess","tagIndex","findIndex","some","isCorrect","unsubscribers","newGuessedTags","userToUpdateScore","find","readyState","unsubscribe","userToSend","ProgressBar","percentComplete","totalTime","color","width","inputHeight","cTagArtist","cTagSpecies","icons","buildUIIconImg","path","IN_GAME_LEADERBOARD_CLASS_NAMES","InRoundLeaderboardContainer","InRoundLeaderboardName","cPrimaryText","cLobbyBackground","InRoundLeaderboardScore","InRoundLeaderboardEntry","li","InRoundLeaderboard","newReadyStates","filter","leaderBoardOrder","useMemo","order","sort","readyStateA","readyStateB","i","renderLeaderboardEntry","zIndex","length","isRanked","isFirst","TagListLabel","h2","TagsInputContainer","TagsInput","TagsGrid","TagsList","pTagList","TagListContainer","setGuess","guessTag","generalTags","artistTags","characterTags","speciesTags","guessedGeneralTags","guessedArtistTags","guessedCharacterTags","guessedSpeciesTags","time","setTime","readyForNextRound","error","myReadyState","timer","setInterval","clearInterval","onSubmit","e","preventDefault","value","onChange","target","slice","Math","ceil","RANK_BAR_CLASS_NAMES","LeaderBoardUserIconContainer","LeaderBoardRankScore","LeaderBoardOuterContainer","LeaderBoardInnerContainer","LeaderBoardRank","LeaderBoardRankBar","cRankFirst","cRankSecond","cRankThird","LeaderBoard","highestScore","rank","rankBarWidth","floor","rankBarClassName","marginRight","emptyTagList","LeaderBoardPageView","NextRoundButton","button","MediaContainer","MainPage","currentPost","update","showLeaderboard","setShowLeaderboard","canStartNewRound","every","startNewRound","shouldShowLeaderboard","onClick","IconList","IconPicker","allIcons","setSelectedIcons","iconSetterUserID","newSelectedIcons","selectedIcon","userToChangeIcon","getSelectedIcons","gridArea","marginTop","gameIcon","buttonClass","selectIcon","ReadyStatus","ReadyUpButton","RoomUpdateButton","StartGameContainer","UsersInLobbyContainer","ReadyUpList","ReadyUpContainer","ReadyUpView","ReadyUp","setCurrentPost","newPost","a","b","usePostFetcher","navigate","useNavigate","newOwner","readyUp","canStartGame","startGame","leaveRoom","document","body","backgroundImage","reg","renderLobbyUserIcon","userIcon","renderReadyState","readyUpButtonClassName","readyUpButtonText","readyUpButton","roomName","Lobby","usernameInput","setUsernameInput","setRooms","createUsername","createRoom","joinRoom","getAllRooms","renderRoom","paddingTop","RoomNameContainer","JoinRoomButton","ReadyUpStatesContainer","ReadyUpState","BlurredImage","paddingBottom","InfoBar","href","display","justifyContent","alignItems","marginLeft","form","Input","placeholder","size","input","bgImageBlur","Theme","bgImage","blur","GlobalStyles","createGlobalStyle","App","undefined","Provider","element","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.73c6714d.chunk.js","sourcesContent":["import { SocketCallBack } from \"./ConnectionManager\";\r\nimport type { EventType } from '../types'\r\n\r\nexport default class EventManager {\r\n    private events: Map<EventType, Set<(...args: any[]) => void | Promise<void>>>;\r\n\r\n    public constructor() {\r\n        this.events = new Map();\r\n    }\r\n\r\n    public listen<T>(event_name: EventType, callback: SocketCallBack<T>) {\r\n        if(!this.events.get(event_name)) {\r\n            // setup dummy function\r\n            this.events.set(event_name, new Set<(...args: any[]) => void>());\r\n        }\r\n        this.events.get(event_name)!.add(callback);\r\n        return () => {\r\n            this.events.get(event_name)?.delete(callback);\r\n        }\r\n    }\r\n\r\n    public dispatch<T>(event_name: EventType, data: T) {\r\n        if(this.events.has(event_name)) {\r\n            console.log(`Handling event: ${event_name}...`);\r\n            this.events.get(event_name)!.forEach((handler) => handler(data));\r\n        }\r\n    }\r\n}","import EventManager from \"./EventManager\";\r\nimport type { EventType } from \"../types\";\r\n\r\nexport type SocketCallBack<T> = (data: T) => void | Promise<void>;\r\n\r\n// TODO: change this to be env-specific\r\n// TODO: this is currently never connecting ;~;\r\n// local deployment URL: ws://localhost:8082\r\n// production deployment URL: http://e621-tag-feud-server.fly.dev\r\nconst port = 8080;\r\nconst location = \"e621-tag-feud-server.fly.dev\"\r\nconst URL = `wss://${location}`;\r\nexport class ConnectionManager {\r\n    private static instance: ConnectionManager;\r\n    private socket: WebSocket;\r\n    private eventManager = new EventManager();\r\n\r\n    private queue: string[];\r\n\r\n    public connecting = true;\r\n\r\n    /**\r\n     * The Singleton's constructor should always be private to prevent direct\r\n     * construction calls with the `new` operator.\r\n     */\r\n    private constructor() {\r\n        this.socket = new WebSocket(URL);\r\n        this.queue = [];\r\n        this.socket.onopen = () => {\r\n            console.log(\"I am connecting to the server\");\r\n            this.connecting = false;\r\n            this.queue.forEach(data => this.socket.send(data));\r\n            this.queue = [];\r\n        }\r\n\r\n        this.socket.onmessage = (event) => {\r\n            const data = JSON.parse(event.data);\r\n            this.eventManager.dispatch(data.type, data);\r\n        }\r\n\r\n        this.socket.onclose = (event) => {\r\n            console.log(event.code);\r\n            console.log('closing socket');\r\n            this.connecting = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The static method that controls the access to the singleton instance.\r\n     *\r\n     * This implementation let you subclass the Singleton class while keeping\r\n     * just one instance of each subclass around.\r\n     */\r\n    public static getInstance(): ConnectionManager {\r\n        console.log(ConnectionManager.instance);\r\n        if (!ConnectionManager.instance) {\r\n            console.log(\"making new Connection Manager\");\r\n            ConnectionManager.instance = new ConnectionManager();\r\n        }\r\n        return ConnectionManager.instance;\r\n    }\r\n\r\n    public listen<T>(event_name: EventType, callback: SocketCallBack<T>) {\r\n        return this.eventManager.listen(event_name, callback);\r\n    }\r\n\r\n    public send<T>(data: T) {\r\n        if(this.connecting) {\r\n            console.log(`Still connecting, adding to queue: ${data}`);\r\n            this.queue.push(JSON.stringify({...data}))\r\n        } else {\r\n            console.log(`Connected, sending to server: ${data}`);\r\n            this.socket.send(JSON.stringify({...data}));\r\n        }\r\n    }\r\n\r\n    public cleanup() {\r\n        this.socket.close();\r\n    }\r\n}","import { createContext } from 'react';\r\nimport { ConnectionManager } from '../util/ConnectionManager';\r\nimport type {UserReadyState, User} from '../types';\r\n\r\ntype UserContextType = {\r\n    // user specific things\r\n    userID?: string,\r\n    username?: string,\r\n    score: number,\r\n    // room specific things\r\n    roomID?: string,\r\n    icon?: string,\r\n    readyStates: UserReadyState[],\r\n    owner?: User,\r\n    connectionManager: ConnectionManager\r\n\r\n    setUserID: (userID: string) => void,\r\n    setUsername: (username: string) => void,\r\n    setRoomID: (roomID: string) => void,\r\n    setIcon: (icon: string) => void,\r\n    setReadyStates: (readyStates: UserReadyState[]) => void,\r\n    setOwner: (owner: User) => void,\r\n    setScore: (score: number) => void,\r\n    leaveRoomCleanup: () => void,\r\n}\r\n\r\nexport const UserContext = createContext<UserContextType>({\r\n        score: 0,\r\n        connectionManager: ConnectionManager.getInstance(),\r\n        readyStates: [],\r\n    \r\n        setUserID: (userID: string) => {},\r\n        setUsername: (username: string) => {},\r\n        setRoomID: (roomID: string) => {},\r\n        setScore: (score: number) => {},\r\n        setIcon: (icon: string) => {},\r\n        setOwner: (owner: User) => {},\r\n        setReadyStates: (readyStates: UserReadyState[]) => {},\r\n        leaveRoomCleanup: () => {},\r\n});","import styled from 'styled-components';\r\n\r\nexport const TitleContainer = styled.div`\r\n    margin: 10px;\r\n    width: 480px;\r\n    max-width: 98vw;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 5px #000;\r\n    text-shadow: 0 0 2px black, 0 0 6px black;\r\n    z-index: 2;\r\n`;\r\n\r\nexport const List = styled.ul`\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: left;\r\n\r\n    li {\r\n        display: grid;\r\n        grid-template-columns: 3fr 1fr 4fr;\r\n        column-gap: 2.5rem;\r\n        background-color: ${p => p.theme.cBodyLight};\r\n        border-radius: 4px;\r\n        width: calc(100% - 4rem);\r\n        padding: 0 1rem 0.25rem 1rem;\r\n    }\r\n`;\r\n\r\nexport const Header = styled.span`\r\n    width: 75%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-self: flex-start;\r\n    padding-left: 32px;\r\n`;\r\n\r\nexport const TitleText = styled.h1`\r\n    font-size: 3.5em;\r\n    color: #b4c7d9;\r\n    text-decoration: none;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: grid; \r\n    grid-template-columns: 1fr 0.5fr 1fr; \r\n    grid-template-rows: 2.25fr 2.25fr 0.75fr; \r\n    grid-template-areas:\r\n    '. . rooms'\r\n    '. e6-join rooms'\r\n    '. e6-create rooms';\r\n    column-gap: 2.5rem;\r\n\r\n    text-align: center;\r\n    position: absolute;\r\n    top: 16em;\r\n    left: 0;\r\n    right: 0;\r\n    \r\n    padding: 0 0 4em 0;\r\n\r\n    a {\r\n        color: #a3bcd3;\r\n        text-decoration: none;\r\n        padding: 0.25rem 0.25rem;\r\n        border: 0;\r\n        font-family: inherit;\r\n        font-size: 100%;\r\n        line-height: 1.25em;\r\n        margin: 0;\r\n    }\r\n    a:hover {\r\n        color: #e9f2fa;\r\n    }\r\n\r\n    input {\r\n        min-width: 8rem;\r\n        border-radius: 2px;\r\n        padding: 1px 4px;\r\n        line-height: normal;\r\n        font-size: 100%;\r\n        margin: 0;\r\n        vertical-align: middle;\r\n        outline: none;\r\n        cursor: pointer;\r\n        border: 0px solid;\r\n    }\r\n\r\n    input:focus {\r\n        background: #ffc;\r\n        color: #000;\r\n        outline: none;\r\n    }\r\n\r\n    button {\r\n        min-width: 8rem;\r\n        border-radius: 2px;\r\n        padding: 1px 4px;\r\n        line-height: normal;\r\n        font-size: 100%;\r\n        margin: 0;\r\n        vertical-align: middle;\r\n        outline: none;\r\n        cursor: pointer;\r\n        border: 0px solid;\r\n    }\r\n\r\n    button:focus {\r\n        background: #ffc;\r\n        color: #000;\r\n        outline: none;\r\n    }\r\n`","import { string, z } from 'zod';\r\n\r\n// shared\r\nexport const EventType = z.enum(['DEFAULT',\r\n'CREATE_ROOM',\r\n'ALL_ROOMS',\r\n'GUESS_TAG',\r\n'READY_UP',\r\n'START_GAME',\r\n'SET_USERNAME',\r\n'SET_ICON',\r\n'GET_SELECTED_ICONS',\r\n'JOIN_ROOM',\r\n'LEAVE_ROOM',\r\n'REQUEST_POST',\r\n'SHOW_LEADERBOARD']);\r\n\r\n/**\r\n * Server-Only Types\r\n */\r\nexport const TagType = z.enum([\"general\", \"species\", \"character\", \"artist\"]);\r\n\r\nexport const Tag = z.object({\r\n    name: z.string(),\r\n    type: TagType,\r\n    score: z.number(),\r\n})\r\n\r\nexport const Post = z.object({\r\n    id: z.number(),\r\n    url: z.string(),\r\n    tags: z.array(Tag)\r\n})\r\n\r\nexport const User = z.object({\r\n    username: z.string(),\r\n    id: z.string(),\r\n    score: z.number(),\r\n    icon: z.optional(z.string()),\r\n    roomID: z.optional(z.string())\r\n})\r\n\r\nexport const ServerRoom = z.object({\r\n    id: z.string(),\r\n    owner: User,\r\n    members: z.array(User),\r\n    postQueue: z.array(Post),\r\n    postsViewedThisRound: z.number(),\r\n    allUsersReady: z.map(z.string(), z.boolean()),\r\n    gameStarted: z.boolean(),\r\n})\r\n\r\nexport const CreateRoomEventData = z.object({\r\n    userID: z.string(),\r\n    type: z.literal(EventType.enum.CREATE_ROOM)\r\n});\r\nexport const JoinRoomEventData = z.object({\r\n    userID: z.optional(z.string()),\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.JOIN_ROOM)\r\n});\r\nexport const LeaveRoomEventData = z.object({\r\n    userID: z.string(),\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.LEAVE_ROOM)\r\n});\r\nexport const GuessTagEventData = z.object({\r\n    user: User,\r\n    tag: Tag,\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.GUESS_TAG)\r\n});\r\nexport const SetUsernameEventData = z.object({\r\n    username: z.string(),\r\n    userID: z.optional(z.string()),\r\n    type: z.literal(EventType.enum.SET_USERNAME)\r\n});\r\nexport const SetUserIconEventData = z.object({\r\n    icon: z.string(),\r\n    userID: z.string(),\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.SET_ICON)\r\n});\r\nexport const GetSelectedIconsEventData = z.object({\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.GET_SELECTED_ICONS)\r\n});\r\nexport const RequestPostEventData = z.object({\r\n    roomID: z.string(),\r\n    userID:z.string(),\r\n    type: z.literal(EventType.enum.REQUEST_POST)\r\n});\r\nexport const ReadyUpEventData = z.object({\r\n    userID: z.string(),\r\n    roomID: z.string(),\r\n    ready: z.boolean(),\r\n    type: z.literal(EventType.enum.READY_UP)\r\n});\r\nexport const StartGameEventData = z.object({\r\n    roomID: z.string(),\r\n    type: z.literal(EventType.enum.START_GAME)\r\n})\r\nexport const AllRoomsEventData = z.object({\r\n    type: z.literal(EventType.enum.ALL_ROOMS)\r\n})\r\n\r\n/**\r\n * Client Types\r\n */\r\n export const UserReadyState = z.object({\r\n    user: User,\r\n    ready: z.boolean(),\r\n    icon: z.optional(z.string()),\r\n})\r\n\r\nexport const ClientRoom = z.object({\r\n    roomID: z.string(),\r\n    owner: User,\r\n    readyStates: z.array(UserReadyState)\r\n})\r\n\r\nexport const CreateRoomEventDataToClient = z.object({\r\n    roomID: z.string(),\r\n    readyStates: z.array(z.boolean()),\r\n    userID: z.optional(z.string()),\r\n    type: z.literal(EventType.enum.CREATE_ROOM)\r\n});\r\n\r\nexport const JoinRoomEventDataToClient = z.object({\r\n    user: User,\r\n    room: ClientRoom,\r\n    type: z.literal(EventType.enum.JOIN_ROOM)\r\n});\r\n\r\nexport const LeaveRoomEventDataToClient = z.object({\r\n    room: ClientRoom,\r\n    type: z.literal(EventType.enum.LEAVE_ROOM)\r\n});\r\n\r\nexport const AllRoomsEventDataToClient = z.object({\r\n    rooms: z.array(ClientRoom),\r\n    type: z.literal(EventType.enum.ALL_ROOMS)\r\n});\r\n\r\nexport const GuessTagEventDataToClient = z.object({\r\n    tag: Tag,\r\n    user: User,\r\n    type: z.literal(EventType.enum.GUESS_TAG)\r\n});\r\n\r\nexport const SetUsernameEventDataToClient = z.object({\r\n    user: User,\r\n    type: z.literal(EventType.enum.SET_USERNAME)\r\n})\r\n\r\nexport const SetUserIconEventDataToClient = z.object({\r\n    userID: z.string(),\r\n    icon: z.optional(z.string()),\r\n    pastIcon: z.optional(z.string()),\r\n    type: z.literal(EventType.enum.SET_ICON)\r\n})\r\n\r\nexport const GetSelectedIconsEventDataToClient = z.object({\r\n    selectedIcons: z.array(z.string()),\r\n    type: z.literal(EventType.enum.GET_SELECTED_ICONS)\r\n})\r\n\r\nexport const RequestPostEventDataToClient = z.object({\r\n    post: z.optional(Post),\r\n    type: z.literal(EventType.enum.REQUEST_POST)\r\n})\r\n\r\nexport const ReadyUpEventDataToClient = z.object({\r\n    roomID: z.string(),\r\n    room: ClientRoom,\r\n    type: z.literal(EventType.enum.READY_UP)\r\n});\r\n\r\nexport const StartGameEventDataToClient = z.object({\r\n    type: z.literal(EventType.enum.START_GAME)\r\n})\r\n\r\nexport const ShowLeaderboardEventDataToClient = z.object({\r\n    type: z.literal(EventType.enum.SHOW_LEADERBOARD)\r\n})\r\n\r\n/**\r\n * Server-Only Object Types\r\n */\r\nexport type ServerRoom = z.infer<typeof ServerRoom>;\r\n\r\n/**\r\n * Server-Only Types\r\n */\r\nexport type CreateRoomEventData = z.infer<typeof CreateRoomEventData>\r\nexport type JoinRoomEventData = z.infer<typeof JoinRoomEventData>\r\nexport type LeaveRoomEventData = z.infer<typeof LeaveRoomEventData>\r\nexport type RequestPostEventData = z.infer<typeof RequestPostEventData>\r\nexport type GuessTagEventData = z.infer<typeof GuessTagEventData>\r\nexport type SetUsernameEventData = z.infer<typeof SetUsernameEventData>\r\nexport type SetUserIconEventData = z.infer<typeof SetUserIconEventData>\r\nexport type GetSelectedIconsEventData = z.infer<typeof GetSelectedIconsEventData>\r\nexport type StartGameEventData = z.infer<typeof StartGameEventData>\r\nexport type ReadyUpEventData = z.infer<typeof ReadyUpEventData>\r\nexport type AllRoomsEventData = z.infer<typeof AllRoomsEventData>\r\n\r\n/**\r\n * Client-Only Types\r\n */\r\nexport type CreateRoomEventDataToClient = z.infer<typeof CreateRoomEventDataToClient>\r\nexport type JoinRoomEventDataToClient = z.infer<typeof JoinRoomEventDataToClient>\r\nexport type LeaveRoomEventDataToClient = z.infer<typeof LeaveRoomEventDataToClient>\r\nexport type AllRoomsEventDataToClient = z.infer<typeof AllRoomsEventDataToClient>\r\nexport type GuessTagEventDataToClient = z.infer<typeof GuessTagEventDataToClient>\r\nexport type RequestPostEventDataToClient = z.infer<typeof RequestPostEventDataToClient>\r\nexport type SetUsernameEventDataToClient = z.infer<typeof SetUsernameEventDataToClient>\r\nexport type SetUserIconEventDataToClient = z.infer<typeof SetUserIconEventDataToClient>\r\nexport type GetSelectedIconsEventDataToClient = z.infer<typeof GetSelectedIconsEventDataToClient>\r\nexport type ReadyUpEventDataToClient = z.infer<typeof ReadyUpEventDataToClient>\r\nexport type StartGameEventDataToClient = z.infer<typeof StartGameEventDataToClient>\r\nexport type ShowLeaderboardEventDataToClient = z.infer<typeof ShowLeaderboardEventDataToClient>\r\n\r\nexport type ClientRoom = z.infer<typeof ClientRoom>;\r\n\r\n/**\r\n * Shared Types\r\n */\r\nexport type TagType = z.infer<typeof TagType>\r\nexport type Tag = z.infer<typeof Tag>;\r\nexport type Post = z.infer<typeof Post>;\r\nexport type User = z.infer<typeof User>;\r\nexport type EventType = z.infer<typeof EventType>;\r\nexport type UserReadyState = z.infer<typeof UserReadyState>;","import { Post } from '../types';\nimport styled from 'styled-components';\n\ninterface Props {\n    post?: Post;\n    className?: string;\n}\n\nconst DisplayedPostElement : React.FC<Props> = (props : Props) => {\n    const { post, className } = props;\n    if (post) {\n        return ( \n            <div>\n                <div className={className}>\n                    <img style={{marginBottom: \"20px\"}} src={post?.url ?? ''} alt=''/>\n                    <br />\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <h1>No Post :(</h1>\n        );\n    };\n};\n\nexport const DisplayedPost = styled(DisplayedPostElement)`\n    flex: 1 1 auto;\n    align-self: auto;\n    background-color: #1F3C67;\n\n    padding: 25px;\n    margin: 20px 75px 0px 75px;\n\n    border-radius: 20px;\n`\n","import type { TagType } from '../types';\nimport styled from 'styled-components';\n\ninterface Props {\n    name: string;\n    tagType: TagType;\n    className?: string;\n}\n\nconst VisibleTagNameElement : React.FC<Props> = (props) => {\n    const { name, className } = props;\n    return (\n        <p className={className}>{name}</p>\n    )\n}\n\nexport const VisibleTagName = styled(VisibleTagNameElement)<Props>`\n    order: 0;\n    flex: 0 1 auto;\n    align-self: auto;\n\n    /* Extracting tagType from this */\n    color: var(--c-tag-${({ tagType }) => tagType})\n`","import styled from 'styled-components';\n\ninterface Props {\n    score: number;\n    className?: string;\n}\n\nconst VisibleTagScoreElement : React.FC<Props> = (props) => {\n    const { score, className } = props;\n    return (\n        <span className={className}>{score}</span>\n    )\n}\n\nexport const VisibleTagScore = styled(VisibleTagScoreElement)<Props>`\n    order: 0;\n    flex: 0 1 auto;\n    align-self: auto;\n\n    color: ${p => p.theme.cTagCharacter}\n`","import type { Tag } from '../types';\nimport { VisibleTagName } from './VisibleTagName';\nimport styled from 'styled-components';\nimport { VisibleTagScore } from './VisibleTagScore';\n\ninterface VisibleProps {\n    tag: Tag;\n    className?: string;\n}\n\nconst TagElement : React.FC<VisibleProps> = (props) => {\n    const { tag, className } = props;\n    return (\n        <div className={className}>\n            <VisibleTagName name={tag.name} tagType={tag.type}></VisibleTagName>\n            <VisibleTagScore score={tag.score}/>\n        </div>\n    )\n}\n\nexport const VisibleTag = styled(TagElement)`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    flex-grow: 1;\n    justify-content: space-between;\n    align-content: flex-start;\n    align-items: flex-start;\n\n    padding: 2px;\n`\n\ninterface HiddenProps {\n    className?: string\n}\n\nconst HiddenTagElement : React.FC<HiddenProps> = (props) => {\n    const { className } = props;\n    return (\n        <li className={className}>???</li>\n    )\n}\n\nexport const HiddenTag = styled(HiddenTagElement)`\n    display: block;\n\n    margin: ${p => p.theme.mTag};\n    letter-spacing: 20px;\n\n    border: 2px dashed #B4C7D9;\n    border-radius: 5px;\n\n    text-align: center;\n    font-style: italic;\n`","import { VisibleTag, HiddenTag } from './VisibleTag';\nimport type { Tag } from '../types';\n\ninterface Props {\n    tags: Tag[],\n    guessedTags: Tag[]\n}\n\nexport const TagList : React.FC<Props> = (props : Props) => {\n    const {tags, guessedTags} = props;\n\n    return (\n        <>\n            <ul>\n                {\n                    tags.map((tag) => {\n                        if(guessedTags.includes(tag)) {\n                            // render VisibleTag\n                            return <VisibleTag tag={tag}></VisibleTag>\n                        } else {\n                            // render HiddenTag\n                            return <HiddenTag></HiddenTag>\n                        }\n                    })\n                }\n            </ul>\n        </>\n    )\n}","import { useEffect, useState, useCallback, useContext } from 'react';\nimport type { GuessTagEventData, GuessTagEventDataToClient, Tag, User } from './types';\nimport alias_data_untyped from './data/tag-aliases.json'\nimport { UserContext } from './contexts/UserContext';\nimport { EventType } from './types';\n\nconst alias_data : Record<string, string> = alias_data_untyped;\n\nfunction checkAlias(tag_name: string) : string {\n    const true_value = alias_data[tag_name];\n    if (true_value) {\n        return true_value\n    } else {\n        return '';\n    }\n}\n// custom hook, returns an object that has the CurrentPost, and an update callback function that we define\nexport default function useTagListGuesser(startingTags : Tag[]) : [\n    Tag[], Tag[], (guess: string) => boolean, () => void, () => void\n] {\n    // want component re-rendering when this changes\n    const [guessedTags, setGuessedTags] = useState<Tag[]>([]);\n    const [hiddenTags, setHiddenTags] = useState(startingTags);\n    const {connectionManager, username, readyStates, setReadyStates, userID, roomID, score} = useContext(UserContext);\n\n    function revealAllTags() {\n        setGuessedTags([...guessedTags, ...hiddenTags]);\n    }\n\n    function hideAllTags() {\n        setGuessedTags([]);\n    }\n\n    // reset on new post\n    useEffect(() => {\n        setHiddenTags(startingTags);\n        setGuessedTags([]);\n    }, [startingTags])\n\n    const handleGuess = useCallback((guess: string) : {isCorrect: boolean, tag?: Tag} => {\n        let tagIndex = hiddenTags.findIndex((tag : Tag) => tag.name === guess);\n        if(guessedTags.some(tag => tag.name === guess)){\n            // console.log('short circuiting, already guessed');\n            return {isCorrect: false};\n        }\n        if(tagIndex < 0) {\n            // see if there is an alias\n            guess = checkAlias(guess);\n            if(guess === '') {\n                // short-circuit on faulty guess, return false for did not guess tag correctly\n                return {isCorrect: false};\n            }\n            tagIndex = hiddenTags.findIndex((tag : Tag) => tag.name === guess)\n            if(tagIndex === -1) {\n                return {isCorrect: false};\n            }\n        }\n        console.log(\"successful guess\");\n        const guessedTag = hiddenTags[tagIndex];\n        return {isCorrect: true, tag: guessedTag};\n    }, [guessedTags, hiddenTags]);\n    \n    // define what the update callback will be\n    const guessTag = (guess: string) : boolean => {\n        const {isCorrect, tag} = handleGuess(guess);\n        if(userID && roomID && isCorrect && tag != null) {\n            // TODO: emit username as well\n            const usernameToSend = username ?? 'DEFAULT_USERNAME';\n            const userToSend: User = {id: userID, score, username: usernameToSend, roomID};\n            const data: GuessTagEventData = {type: EventType.enum.GUESS_TAG, tag, user: userToSend, roomID};\n            connectionManager.send(data);\n        }\n        return isCorrect;\n    }\n\n    useEffect(() => {\n        // console.log(\"adding event listener...\");\n        const onGuess = (data: GuessTagEventDataToClient) => {\n            const {isCorrect, tag} = handleGuess(data.tag.name);\n            console.log(`isCorrect: ${isCorrect} Tag: ${tag}`);\n            if(isCorrect && tag != null) {\n                // TODO: associate guessed tags with a user that guessed it\n                const newGuessedTags = [...guessedTags, tag];\n                setGuessedTags(newGuessedTags);\n                // update user's score on client side\n                const userToUpdateScore = readyStates.find(readyState => readyState.user.id === data.user.id);\n                if(userToUpdateScore) {\n                    console.log(`score before: ${userToUpdateScore.user.score}`);\n                    userToUpdateScore.user.score += tag.score;\n                    console.log(`score after: ${userToUpdateScore.user.score}`);\n                    setReadyStates([...readyStates]);\n                }\n            }\n        };\n        const unsubscribers = [connectionManager.listen<GuessTagEventDataToClient>(EventType.enum.GUESS_TAG, onGuess)];\n        return () => {\n            unsubscribers.forEach(unsubscribe => unsubscribe());\n        }\n\n    }, [connectionManager, guessedTags, handleGuess])\n\n    return [ guessedTags, hiddenTags, guessTag, revealAllTags, hideAllTags ];\n  }","import styled from 'styled-components';\n\ninterface Props {\n  percentComplete: number;\n  totalTime : number;\n  className?: string;\n}\n\nconst ProgressBarElement : React.FC<Props> = ({ percentComplete, totalTime, className }) => {\n\n    const color = percentComplete > 66 ? \"character\" : percentComplete > 33 ? \"artist\" : \"species\";\n\n  return <div className={className}>\n      <div style={{width: `${percentComplete}%`}} className={`inner-bar ${color}`}></div>\n    </div>\n};\n\nexport const ProgressBar = styled(ProgressBarElement)<Props>`\n\npadding: 5px;\nbackground-color: white;\nborder-radius: 10px;\nheight: ${p => p.theme.inputHeight};\n\n.inner-bar {\n    height: 100%;\n    border-radius: 8px;\n\n    transition: ${props => props.totalTime / 6}s ease background-color;\n\n    &.character {\n        background-color: ${p => p.theme.cTagCharacter};\n    }\n\n    &.artist {\n        background-color: ${p => p.theme.cTagArtist};\n    }\n\n    &.species {\n        background-color: ${p => p.theme.cTagSpecies};\n    }\n}\n`","export const icons = [\r\n    'anubis.jpg', 'asriel.jpg', 'bowser.jpg', \r\n    'charizard.jpg', 'falco.jpg', 'fox.jpg', \r\n    'isabelle.jpg', 'judy hops.jpg', 'krystal.jpg', \r\n    'legosi.png', 'loona.jpg', 'louis.jpg', \r\n    'lucario.jpg', 'nick wilde.jpg', 'renamon.jpg', \r\n    'rocket.jpg', 'spyro.jpg', 'toriel.jpg', \r\n    'umbreon.jpg', 'wolf.jpg'\r\n];\r\n\r\nexport const buildUIIconImg = (path: string, icon: string, className?: string) => {\r\n    return <img src={`${path}${icon}`} alt={`${icon}`} className={className ?? ''} />;\r\n}","import { useEffect, useMemo, useContext, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { GuessTagEventDataToClient } from '../types';\r\nimport { EventType, UserReadyState } from '../types';\r\nimport { UserContext } from '../contexts/UserContext';\r\nimport { buildUIIconImg } from '../util/UIUtil';\r\n\r\ninterface Props {\r\n    className?: string;\r\n};\r\n\r\nconst IN_GAME_LEADERBOARD_CLASS_NAMES = ['first', 'second', 'third'];\r\n\r\nconst InRoundLeaderboard: React.FC<Props> = ({className} : Props) => {\r\n    const {readyStates, setReadyStates, connectionManager} = useContext(UserContext);\r\n\r\n    useEffect(() => {\r\n        const onSuccessfulGuess = (data: GuessTagEventDataToClient) => {\r\n            const {user} = data;\r\n            const newReadyStates = readyStates.filter(readyState => readyState.user.id !== user.id);\r\n            setReadyStates(newReadyStates);\r\n        };\r\n\r\n        const unsubscribers = [\r\n            connectionManager.listen<GuessTagEventDataToClient>(EventType.enum.GUESS_TAG, onSuccessfulGuess)\r\n        ]\r\n\r\n        return () => {\r\n            unsubscribers.forEach(unsubscribe => unsubscribe());\r\n        }\r\n    }, [connectionManager, readyStates, setReadyStates]);\r\n\r\n    const leaderBoardOrder = useMemo(() => {\r\n        const order = new Map<string, number>();\r\n        readyStates.sort((readyStateA, readyStateB) => readyStateB.user.score - readyStateA.user.score);\r\n        readyStates.forEach((readyState, i) => {\r\n            order.set(readyState.user.id, i);\r\n        });\r\n        return order;\r\n    }, [readyStates]);\r\n\r\n    const renderLeaderboardEntry = useCallback((readyState: UserReadyState) => {\r\n        const order = leaderBoardOrder.get(readyState.user.id);\r\n        const zIndex = order ? readyStates.length - order : readyStates.length;\r\n        const isRanked = (order ?? 0) <= 2;\r\n        const isFirst = (order ?? 1) === 0;\r\n        let className: string = '';\r\n        if(readyState.ready) {\r\n            className = 'finished';\r\n        } else {\r\n            if(isRanked) {\r\n                className = IN_GAME_LEADERBOARD_CLASS_NAMES[(order ?? 0)];\r\n            }\r\n        }\r\n        return <InRoundLeaderboardEntry className={className} style={{order: order, zIndex: zIndex}}>\r\n            {\r\n                readyState.icon && buildUIIconImg('./profile_icons/', readyState.icon, isRanked ? 'ranked' : '')\r\n            }\r\n            <InRoundLeaderboardName  className={isFirst && !readyState.ready ? 'dark' : ''}>{readyState.user.username}</InRoundLeaderboardName>\r\n            <InRoundLeaderboardScore className={isFirst && !readyState.ready ? 'dark' : ''}>{readyState.user.score}</InRoundLeaderboardScore>\r\n        </InRoundLeaderboardEntry>;\r\n    }, [leaderBoardOrder, readyStates])\r\n\r\n    return <InRoundLeaderboardContainer>\r\n        {\r\n            readyStates.map(readyState => renderLeaderboardEntry(readyState))\r\n        }\r\n    </InRoundLeaderboardContainer>;\r\n}\r\n\r\n\r\n// cRankFirst: \"#ffda38\",\r\n//   cRankSecond: \"#a3a3a3\",\r\n//   cRankThird: \"#e28c1c\",\r\n\r\nconst InRoundLeaderboardContainer = styled.ul`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    width: 100%;\r\n    height: 60px;\r\n    background-color: transparent;\r\n    `;\r\n\r\nconst InRoundLeaderboardName = styled.p`\r\n    color: ${p => p.theme.cPrimaryText};\r\n    transition: color .2s;\r\n    font-size: 1em;\r\n    font-weight: bold;\r\n    padding-right: 8px;\r\n\r\n    &.dark {\r\n        color: ${p => p.theme.cLobbyBackground};\r\n    }\r\n`\r\n\r\nconst InRoundLeaderboardScore = styled.p`\r\n    color: ${p => p.theme.cTagSpecies};\r\n    padding-right: 8px;\r\n    \r\n    &.dark {\r\n        color: #c03a00;\r\n    }\r\n`\r\n\r\nconst InRoundLeaderboardEntry = styled.li`\r\n    padding: 2 0 2 0;\r\n    border-radius: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: ${p => p.theme.cBodyLight};\r\n    color: ${p => p.theme.cPrimaryText};\r\n    margin-right: 12px;\r\n\r\n    transition: background-color .2s, order 1s;\r\n\r\n    &.finished {\r\n        background-color: #125512;\r\n    }\r\n    \r\n    &.first {\r\n        background-color: #f5d85a;\r\n    }\r\n    \r\n    &.second {\r\n        background-color: #5e5e5e;\r\n    }\r\n    \r\n    &.third {\r\n        background-color: #6e4209;\r\n    }\r\n\r\n    img {\r\n        width: 30px;\r\n        height: 30px;\r\n        border-radius: 50%;\r\n        border: 2px solid ${p => p.theme.cPrimaryText};\r\n        \r\n        margin-right: 8px;\r\n\r\n        transition: border-color .2s;\r\n        &.ranked{\r\n            border-color: ${p => p.theme.cLobbyBackground};\r\n        }\r\n    }\r\n`;\r\n\r\nexport default InRoundLeaderboard;","import styled from 'styled-components';\n\nexport const TagListLabel = styled.h2`\n  margin: 10px 0px 10px 0px;\n`;\n\nexport const TagsInputContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 2fr; \n  grid-template-rows: 1fr; \n  gap: 30px 10px;\n`;\n\nexport const TagsInput = styled.div`\n  flex: 0 1 auto;\n  padding: 0px 5px 5px 0px;\n  font-size: 20px;\n  border-radius: 10px;\n\n  :focus {\n    outline: none;\n  }\n\n  input {\n    padding: 2px 2px 2px 5px;\n    border-radius: 8px;\n    height: ${p => p.theme.inputHeight};\n    font-family: Verdana, sans-serif;\n    font-size: .75em;\n    font-weight: bold;\n  }\n\n  input:focus {\n    outline: none;\n  }\n`;\n\nexport const TagsGrid = styled.div`\n  display: grid; \n  grid-template-columns: 1fr 1fr 1fr; \n  grid-template-rows: 1fr; \n  gap: 0px 20px; \n  grid-template-areas: \n      \". .\";\n\n  padding-top: 5px;\n\n  min-width: 90%;\n`;\n\nexport const TagsList = styled.div`\n  display: block;\n  background-color: #1F3C67;\n\n  flex: 1 1 auto;\n\n  border-radius: 10px;\n\n  font-size: 0.85em;\n\n  padding: ${p => p.theme.pTagList};\n`;\n","import { useState, useEffect, useMemo, useContext, useCallback } from 'react';\nimport { ReadyUpEventData, ReadyUpEventDataToClient, RequestPostEventDataToClient, Tag, TagType } from '../types';\nimport { EventType } from '../types';\nimport { TagList } from './TagList';\nimport useTagListGuesser from '../useTagListGuesser';\nimport styled from 'styled-components';\nimport { ProgressBar } from './ProgressBar';\nimport InRoundLeaderboard from './InRoundLeaderboard';\nimport { TagListLabel, TagsGrid, TagsInput, TagsInputContainer, TagsList } from './TagListContainerStyles';\nimport { UserContext } from '../contexts/UserContext';\n\nconst STARTING_TIME = 30;\nconst FRAME_RATE = 60;\nconst INCORRECT_GUESS_PENALTY = 3;\n\ninterface Props {\n    tags: Tag[];\n    className?: string;\n};\n\nconst TagListContainerElement: React.FC<Props> = (props: Props) => {\n    const { tags, className } = props;\n    const [guess, setGuess] = useState('');\n    const [guessedTags, hiddenTags, guessTag, revealAllTags, hideAllTags] = useTagListGuesser(tags);\n    const {userID, roomID, readyStates, setReadyStates, connectionManager} = useContext(UserContext);\n\n    const [generalTags, artistTags, characterTags, speciesTags] = useMemo(() => {\n        const generalTags = tags.filter(tag => tag.type === 'general');\n        const artistTags = tags.filter(tag => tag.type === 'artist');\n        const characterTags = tags.filter(tag => tag.type === 'character');\n        const speciesTags = tags.filter(tag => tag.type === 'species');\n        return [generalTags, artistTags, characterTags, speciesTags];\n    }, [tags]);\n\n    const [guessedGeneralTags, guessedArtistTags, guessedCharacterTags, guessedSpeciesTags] = useMemo(() => {\n        const guessedGeneralTags = guessedTags.filter(tag => tag.type === 'general');\n        const guessedArtistTags = guessedTags.filter(tag => tag.type === 'artist');\n        const guessedCharacterTags = guessedTags.filter(tag => tag.type === 'character');\n        const guessedSpeciesTags = guessedTags.filter(tag => tag.type === 'species');\n        return [guessedGeneralTags, guessedArtistTags, guessedCharacterTags, guessedSpeciesTags];\n    }, [guessedTags])\n\n    const [time, setTime] = useState(STARTING_TIME);\n\n    useEffect(() => {\n        const onTimerEnd = (data: ReadyUpEventDataToClient) => {\n            console.log(console.log(`Timer ran out -- ready states: ${data.room.readyStates}`));\n            const readyStates = data.room.readyStates;\n            // populate new ready states\n            setReadyStates(readyStates);\n        }\n\n        const onNewRoundStart = (data: RequestPostEventDataToClient) => {\n            // new round has started, so reset the timer\n            setTime(STARTING_TIME);\n        }\n\n        const unsubscribers = [\n            connectionManager.listen<ReadyUpEventDataToClient>(EventType.enum.READY_UP, onTimerEnd),\n            connectionManager.listen<RequestPostEventDataToClient>(EventType.enum.REQUEST_POST, onNewRoundStart),\n        ];\n\n        return () => {\n            unsubscribers.forEach(unsubscribe => unsubscribe());\n        }\n    }, [connectionManager, setReadyStates]);\n    \n    const readyForNextRound = useCallback((ready: boolean) => {\n        if(userID != null && roomID != null) {\n          console.log(`user ${userID} is ready for next round: ${ready}`);\n          const data: ReadyUpEventData = {type: EventType.enum.READY_UP, userID, roomID, ready};\n          connectionManager.send(data);\n        } else {\n          console.error('user finished round before room or user was created')\n        }\n      }, [connectionManager, userID, roomID]);\n\n      const myReadyState = useMemo(() => {\n        const readyState = readyStates.find(readyState => readyState.user.id === userID)\n        console.log(readyState);\n        return readyState;\n      }, [readyStates, userID]);\n\n    useEffect(() => {\n        // frame rate of 60 fps for timer\n        const timer = setInterval(() => setTime(time - (1 / FRAME_RATE)), (1000 / FRAME_RATE));\n\n        if (time <= 0 && !myReadyState?.ready) {\n            readyForNextRound(true);\n        }\n        return () => {\n            clearInterval(timer);\n        }\n    }, [readyForNextRound, time])\n\n\n    return (\n        <div className={className}>\n            <h1>Guess a tag!{ }</h1>\n            <TagsInputContainer>\n                <TagsInput>\n                    <form onSubmit={(e) => {\n                        e.preventDefault();\n                        const guessedCorrect = guessTag(guess);\n                        if (!guessedCorrect) {\n                            setTime(time - INCORRECT_GUESS_PENALTY);\n                        }\n                        setGuess(\"\");\n                    }}>\n                        <input type=\"text\" value={guess} onChange={(e) => setGuess(e.target.value)}\n                        />\n                    </form>\n                </TagsInput>\n                <ProgressBar percentComplete={time / STARTING_TIME * 100} totalTime={STARTING_TIME}/>\n                {/* <Timer onRoundFinish={onRoundFinish} /> */}\n            </TagsInputContainer>\n            {/* <button onClick={revealAllTags}>\n                reveal tags\n            </button>\n            <button onClick={hideAllTags}>\n                clear tags\n            </button> */}\n            <InRoundLeaderboard />\n            {/* Grid definition */}\n            <TagListLabel> General Tags </TagListLabel>\n            <TagsGrid>\n                {/* 1/3 side of grid */}\n                <TagsList>\n                    {/* Big large general tag block, takes up 1/3 of right side of screen */}\n                    <TagList tags={generalTags.slice(0, Math.ceil(generalTags.length / 3))} guessedTags={guessedGeneralTags}\n                    ></TagList>\n                </TagsList>\n                <TagsList>\n                    {/* 1 / 3 of grid */}\n                    <TagList tags={generalTags.slice(Math.ceil(generalTags.length / 3), Math.ceil(generalTags.length / 3) * 2)} guessedTags={guessedGeneralTags}></TagList>\n                </TagsList>\n                <TagsList>\n                    {/* 1 / 3 of grid */}\n                    <TagList tags={generalTags.slice(Math.ceil(generalTags.length / 3) * 2)} guessedTags={guessedGeneralTags}></TagList>\n                </TagsList>\n            </TagsGrid>\n            {/* Artist, chracter, and species tags */}\n            <TagsGrid>\n                <div>\n                    <TagListLabel> Species Tags </TagListLabel>\n                    <TagsList>\n                        <TagList tags={speciesTags} guessedTags={guessedSpeciesTags}></TagList>\n                    </TagsList>\n                </div>\n                <div>\n                    <TagListLabel> Character Tags </TagListLabel>\n                    <TagsList>\n                        <TagList tags={characterTags} guessedTags={guessedCharacterTags}></TagList>\n                    </TagsList>\n                </div>\n                <div>\n                    <TagListLabel> Artist Tags </TagListLabel>\n                    {/* Rest of the tags, stacked on top of one another. Takes up the other 1/2 side of right screen */}\n                    <TagsList>\n                        <TagList tags={artistTags} guessedTags={guessedArtistTags}></TagList>\n                    </TagsList>\n                </div>\n            </TagsGrid>\n        </div>\n    );\n};\n\nexport const TagListContainer = styled(TagListContainerElement)`\n    display: flex;\n    flex-direction: column;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    align-items: flex-start;\n`;","import styled from 'styled-components';\r\nimport { UserContext } from '../contexts/UserContext';\r\nimport { useContext } from 'react';\r\nimport { buildUIIconImg } from '../util/UIUtil';\r\n\r\n\r\nconst BASE_LEADERBOARD_WIDTH = 20;\r\nconst MAX_LEADERBOARD_WIDTH = 350;\r\n\r\nconst RANK_BAR_CLASS_NAMES = ['first', 'second', 'third'];\r\n\r\nfunction LeaderBoard(): JSX.Element {\r\n  /**\r\n   * Server-driven user values\r\n   */\r\n  const { readyStates } = useContext(UserContext);\r\n  readyStates.sort((readyStateA, readyStateB) => readyStateB.user.score- readyStateA.user.score);\r\n  const highestScore = readyStates[0].user.score + 1;\r\n  return (\r\n    <LeaderBoardOuterContainer>\r\n        <LeaderBoardInnerContainer>\r\n            {\r\n                readyStates.map((readyState, rank) => {\r\n                    const score = readyState.user.score;\r\n                    const username = readyState.user.username;\r\n                    const icon = readyState.user.icon;\r\n                    const rankBarWidth = (Math.floor((score / highestScore) * (MAX_LEADERBOARD_WIDTH - BASE_LEADERBOARD_WIDTH))) + BASE_LEADERBOARD_WIDTH;\r\n                    console.log(`highest score: ${highestScore}`);\r\n                    let rankBarClassName : string = '';\r\n                    if(rank <= 2) {\r\n                        rankBarClassName = RANK_BAR_CLASS_NAMES[rank];\r\n                    }\r\n                    return <LeaderBoardRank>\r\n                        <p style={{marginRight: 16}}>{rank + 1}</p>\r\n                        <LeaderBoardRankBar style={{width: rankBarWidth}} className={rankBarClassName}/>\r\n                        <LeaderBoardRankScore>{readyState.user.score}</LeaderBoardRankScore>\r\n                        <p>{username}</p>\r\n                        {\r\n                            icon && \r\n                            <LeaderBoardUserIconContainer>\r\n                                {\r\n                                    buildUIIconImg('./profile_icons/', icon)\r\n                                }\r\n                            </LeaderBoardUserIconContainer>\r\n                        }\r\n                    </LeaderBoardRank>\r\n                })\r\n            }\r\n        </LeaderBoardInnerContainer>\r\n    </LeaderBoardOuterContainer>\r\n  )\r\n}\r\n\r\nconst LeaderBoardUserIconContainer = styled.div`\r\n    border-radius: 50%;\r\n    border: 2px solid ${p => p.theme.cPrimaryText};\r\n    width: 1.5em;\r\n    height: 1.5em;\r\n    img {\r\n        width: 100%;\r\n        height: 100%;\r\n        border-radius: 50%;\r\n    }\r\n`\r\n\r\nconst LeaderBoardRankScore = styled.p`\r\n    color: ${p => p.theme.cTagSpecies};\r\n`\r\n\r\nconst LeaderBoardOuterContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst LeaderBoardInnerContainer = styled.ul`\r\n    margin: 10px;\r\n    padding: 16px;\r\n    max-width: 98vw;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 5px #000;\r\n`;\r\n\r\nconst LeaderBoardRank = styled.li`\r\n    padding: 0 6 0 6;\r\n    font-size: 2em;\r\n    color: ${p => p.theme.cPrimaryText};\r\n    \r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n\r\n    p {\r\n        margin-right: 8px;\r\n    }\r\n`\r\n\r\nconst LeaderBoardRankBar = styled.div`\r\n    background-color: ${p => p.theme.cBodyLight};\r\n    height: 1.35em;\r\n    border-radius: 4px;\r\n    margin-right: 8px;\r\n    \r\n    &.first {\r\n        background-color: ${p => p.theme.cRankFirst};\r\n    }\r\n    &.second {\r\n        background-color: ${p => p.theme.cRankSecond};\r\n    }\r\n    &.third {\r\n        background-color: ${p => p.theme.cRankThird};\r\n    }\r\n`\r\n\r\nexport default LeaderBoard;\r\n","import { DisplayedPost } from '../components/DisplayedPost';\nimport { TagListContainer } from '../components/TagListContainer';\nimport usePostFetcher from '../usePostFetcher';\nimport styled from 'styled-components';\nimport { UserContext } from '../contexts/UserContext';\nimport { useContext, useEffect, useState } from 'react';\nimport { Tag, Post, ShowLeaderboardEventDataToClient, EventType, RequestPostEventDataToClient } from '../types';\nimport LeaderBoard from '../components/Leaderboard';\n// TODO: ^ use this lol\n\nconst emptyTagList : Tag[] = [];\n\ntype Props = {\n  currentPost: Post,\n  update: () => void,\n}\n\nfunction MainPage({currentPost, update} : Props): JSX.Element {\n  /**\n   * Server-driven user values\n   */\n  const {roomID, readyStates, connectionManager, userID, owner } = useContext(UserContext);\n  const [showLeaderboard, setShowLeaderboard] = useState(false);\n  \n  const canStartNewRound = readyStates.every(readyState => readyState.ready);\n\n  useEffect(() => {\n    const onShowLeaderboard = (data: ShowLeaderboardEventDataToClient) => {\n      setShowLeaderboard(true);\n    }\n\n    const onStartNewRound = (data: RequestPostEventDataToClient) => {\n      setShowLeaderboard(false);\n    }\n\n    const unsubscribers = [\n      connectionManager.listen<ShowLeaderboardEventDataToClient>(EventType.enum.SHOW_LEADERBOARD, onShowLeaderboard),\n      connectionManager.listen<RequestPostEventDataToClient>(EventType.enum.REQUEST_POST, onStartNewRound),\n    ];\n\n    return () => {\n      unsubscribers.forEach(unsubscribe => unsubscribe());\n    }\n  }, [connectionManager])\n\n  const startNewRound = () => {\n    if(canStartNewRound) {\n      update();\n    }\n  }\n\n  const shouldShowLeaderboard = roomID != null && !showLeaderboard;\n\n  const nextPostButton = <NextRoundButton onClick={startNewRound}>Next Post</NextRoundButton>;\n\n  return (\n    <div>\n      {\n        shouldShowLeaderboard ? <MediaContainer>\n        {\n          currentPost && <>\n            {/* Delete this wrapper div once done. Only here so that Next Post is under it */}\n            <DisplayedPost post={currentPost} />\n            {/* pass in an empty TagList placeholder if there's no post */}\n            <TagListContainer tags={currentPost ? currentPost.tags : emptyTagList} />\n          </> \n        }\n        <button onClick={startNewRound}>\n          next round\n        </button>\n      </MediaContainer> : <LeaderBoardPageView>\n          <LeaderBoard />\n          {\n            userID === owner?.id && <NextRoundButton onClick={startNewRound}>Start Next Round</NextRoundButton>\n          }\n      </LeaderBoardPageView>\n      }\n    </div>\n  )\n}\n\nconst LeaderBoardPageView = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst NextRoundButton = styled.button`\n  color: ${p => p.theme.cTagCharacter};\n  border: 4px solid ${p => p.theme.cTagCharacter};\n  border-radius: 12px;\n  background-color: transparent;\n\n  font-size: 1.25em;\n  font-weight: bold;\n  padding: 12px;\n  transition: background-color .2s, color .2s, transform .2s;\n\n  &:hover {\n    transform: scale(125%);\n    background-color: ${p => p.theme.cTagCharacter};\n    color: ${p => p.theme.cLobbyBackground};\n  }\n\n  &:focus {\n    transform: scale(105%);\n  }\n`\n\nconst MediaContainer = styled.div`\n  display: grid; \n  grid-template-columns: 1fr 1fr; \n  grid-template-rows: 1fr; \n  gap: 30px 0px; \n  grid-template-areas: \n      \". .\";\n`;\n\nexport default MainPage;\n","import { UserContext } from '../contexts/UserContext';\r\nimport { useContext, useMemo, useState, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Container, List, Header, TitleText, TitleContainer } from '../components/StyledElements';\r\nimport { GetSelectedIconsEventData, GetSelectedIconsEventDataToClient, JoinRoomEventDataToClient, LeaveRoomEventDataToClient, SetUserIconEventData, SetUserIconEventDataToClient, UserReadyState } from '../types';\r\nimport { EventType } from '../types';\r\nimport { icons, buildUIIconImg } from '../util/UIUtil';\r\n\r\ntype Props = {\r\n  className?: string;\r\n  allIcons: string[];\r\n}\r\n\r\nconst IconPicker: React.FC<Props> = ({allIcons} : Props) => {\r\n  const [selectedIcons, setSelectedIcons] = useState<string[]>([]);\r\n  const {userID, roomID, icon, setIcon, connectionManager, readyStates, setReadyStates} = useContext(UserContext);\r\n\r\n  useEffect(() => {\r\n    const onIconSelected = (data: SetUserIconEventDataToClient) => {\r\n        const {icon, pastIcon } = data;\r\n        const iconSetterUserID = data.userID;\r\n        let newSelectedIcons = icon ? [...selectedIcons, icon] : [...selectedIcons];\r\n        if(pastIcon) {\r\n            newSelectedIcons = newSelectedIcons.filter(selectedIcon => selectedIcon !== pastIcon);\r\n        }\r\n        setSelectedIcons(newSelectedIcons);\r\n        const userToChangeIcon = readyStates.find(readyState => readyState.user.id === iconSetterUserID);\r\n        if(userToChangeIcon && icon) {\r\n            userToChangeIcon.icon = icon;\r\n            setReadyStates([...readyStates])\r\n        }\r\n    }\r\n\r\n    const onAllSelectedIcons = (data: GetSelectedIconsEventDataToClient) => {\r\n      console.log('setting initially selected icons');\r\n      const newSelectedIcons = data.selectedIcons;\r\n      console.log(newSelectedIcons);\r\n      setSelectedIcons(newSelectedIcons);\r\n    }\r\n\r\n    const unsubscribers = [\r\n        connectionManager.listen<SetUserIconEventDataToClient>(EventType.enum.SET_ICON, onIconSelected),\r\n        connectionManager.listen<GetSelectedIconsEventDataToClient>(EventType.enum.GET_SELECTED_ICONS, onAllSelectedIcons),\r\n    ];\r\n\r\n    return () => {\r\n        unsubscribers.forEach(unsubscribe => unsubscribe());\r\n    }\r\n  }, [connectionManager, readyStates, selectedIcons, setReadyStates, setSelectedIcons]);\r\n\r\n  const selectIcon = (gameIcon: string) => {\r\n    if(userID && roomID && !selectedIcons.includes(gameIcon)) {\r\n        const data: SetUserIconEventData = {type: EventType.enum.SET_ICON, userID, roomID, icon: gameIcon}\r\n        setIcon(gameIcon);\r\n        connectionManager.send(data);\r\n    }\r\n  }\r\n\r\n  const getSelectedIcons = useCallback(() => {\r\n    if(roomID) {\r\n      const data : GetSelectedIconsEventData = {type: EventType.enum.GET_SELECTED_ICONS, roomID};\r\n      connectionManager.send(data);\r\n    }\r\n  }, [connectionManager, roomID])\r\n\r\n  useEffect(() => {\r\n    // get selected icons on mount\r\n    console.log('getting initial selected icons...')\r\n    getSelectedIcons();\r\n  }, [])\r\n\r\n  return (\r\n    <div style={{gridArea: 'icons', marginTop: 32}}>\r\n        <IconList>\r\n          {\r\n            icons.map((gameIcon) => {\r\n                let buttonClass;\r\n                if(icon === gameIcon) {\r\n                    buttonClass = 'selected';\r\n                } else {\r\n                    if(selectedIcons.includes(gameIcon)) {\r\n                        buttonClass = 'disabled';\r\n                    } else {\r\n                        buttonClass = 'selectable';\r\n                    }\r\n                }\r\n                return <li className={buttonClass}><button onClick={() => selectIcon(gameIcon)}>{buildUIIconImg('./profile_icons/', gameIcon)}</button></li>;\r\n            })\r\n          }\r\n        </IconList>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst IconList = styled.ul`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n\r\n  li {\r\n    position: relative;\r\n    transition: filter .2s, transform .2s;\r\n    &.disabled {\r\n        filter: brightness(40%);\r\n    }\r\n\r\n    &.selected {\r\n        filter: brightness(115%);\r\n        transform: scale(1.25);\r\n        z-index: 3;\r\n    }\r\n\r\n    &.selectable {\r\n        filter: brightness(75%);\r\n        vertical-align: middle;\r\n        border-radius: 50%;\r\n    }\r\n\r\n    &.selectable:hover {\r\n        transform: scale(1.5);\r\n        filter: brightness(115%); \r\n        z-index: 99\r\n    }\r\n\r\n    &.selectable:focus {\r\n        transform: scale(1.25);\r\n        filter: brightness(115%);\r\n    }\r\n    button {\r\n        background-color: transparent;\r\n        border: none;\r\n        box-shadow: 0;\r\n        text-shadow: 0;\r\n      img {\r\n        width: 70px;\r\n        height: 70px;\r\n        border: 5px solid ${p => p.theme.cBodyLight};\r\n        border-radius: 50%;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default IconPicker;","export default __webpack_public_path__ + \"static/media/e6TagGameMascot.2884d1c1.png\";","import { UserContext } from '../contexts/UserContext';\nimport { useContext, useMemo, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { TitleText, } from '../components/StyledElements';\nimport {JoinRoomEventDataToClient, LeaveRoomEventData, LeaveRoomEventDataToClient, ReadyUpEventData, ReadyUpEventDataToClient, RequestPostEventData, UserReadyState } from '../types';\nimport { EventType } from '../types';\nimport MainPage from './MainPage';\nimport IconPicker from '../components/IconPicker';\nimport { icons, buildUIIconImg } from '../util/UIUtil';\nimport usePostFetcher from '../usePostFetcher';\nimport {\n  useNavigate,\n} from 'react-router-dom';\n\nimport reg from '../images/e6TagGameMascot.png';\n\ntype Props = {\n  className?: string;\n}\n\nexport const ReadyUp : React.FC<Props> = ({className}: Props) => {\n  /**\n   * Server-driven user values\n   */\n  const {userID, username, roomID, readyStates, owner, setOwner, setReadyStates, leaveRoomCleanup, connectionManager} = useContext(UserContext);\n  const { currentPost, update } = usePostFetcher(connectionManager, roomID);\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    const onNewUserJoin = (data: JoinRoomEventDataToClient) => {\n      console.log(`${data.user.username} has joined the room`);\n      const user = data.user;\n      const newReadyStates = [...readyStates, {user, ready: false}];\n      setReadyStates(newReadyStates);\n    }\n    \n    const onNewReadyStates = (data: ReadyUpEventDataToClient) => {\n      console.log(console.log(`ready up updated -- ready states: ${data.room.readyStates}`));\n      const readyStates = data.room.readyStates;\n      // populate new ready states\n      setReadyStates(readyStates);\n    }\n\n    const onUserLeftRoom = (data: LeaveRoomEventDataToClient) => {\n      console.log('Someone left the room...')\n      const newReadyStates = data.room.readyStates;\n      const newOwner = data.room.owner;\n      if(!owner) {\n        setOwner(newOwner);\n      } else {\n        if(owner.id !== newOwner.id) {\n          setOwner(newOwner);\n        }\n      }\n      setReadyStates(newReadyStates);\n\n    }\n\n    // orchestrate game start\n    const unsubscribers = [\n        connectionManager.listen<ReadyUpEventDataToClient>(EventType.enum.READY_UP, onNewReadyStates),\n        connectionManager.listen<JoinRoomEventDataToClient>(EventType.enum.JOIN_ROOM, onNewUserJoin),\n        connectionManager.listen<LeaveRoomEventDataToClient>(EventType.enum.LEAVE_ROOM, onUserLeftRoom),\n    ];\n\n    return () => {\n        unsubscribers.forEach(unsubscribe => unsubscribe());\n    }\n}, [connectionManager, owner, readyStates, setOwner, setReadyStates])\n\n  const readyUp = useCallback((ready: boolean) => {\n    if(userID != null && roomID != null) {\n      console.log(\"readying up\");\n      const data: ReadyUpEventData = {type: EventType.enum.READY_UP, userID, roomID, ready};\n      connectionManager.send(data);\n    } else {\n      console.error('user readied up before room or user was created')\n    }\n  }, [connectionManager, userID, roomID]);\n\n  const canStartGame = useMemo(() => readyStates.every(readyState => readyState.ready && readyState.icon), [readyStates]);\n\n  const startGame = useCallback(() => {\n    if(roomID && userID && userID === owner?.id && canStartGame) {\n      const data: RequestPostEventData = {type: EventType.enum.REQUEST_POST, roomID, userID};\n      connectionManager.send(data);\n    }\n  }, [roomID, userID, owner?.id, canStartGame, connectionManager]);\n\n  const leaveRoom = useCallback(() => {\n    console.log(`${username ?? 'NO USERNAME'} is leaving the room`);\n    if(roomID && userID) {\n      const data: LeaveRoomEventData = {type: EventType.enum.LEAVE_ROOM, userID, roomID};\n      connectionManager.send(data);\n      leaveRoomCleanup();\n    }\n    document.body.style.backgroundImage = `url(${reg})`;\n    navigate(\"/\");\n  }, [connectionManager, leaveRoomCleanup, navigate, roomID, userID, username]);\n\n  const renderLobbyUserIcon = useCallback((userIcon?: string) => {\n    if(userIcon) {\n      return (\n        <div style={{gridArea: 'icon'}} className='icon-chosen'>\n          {buildUIIconImg('./profile_icons/', userIcon)}\n        </div>\n      )\n    }\n    return (\n      <div style={{gridArea: 'icon'}} className='icon-unchosen'>\n        <p>?</p>\n      </div>\n    )\n  }, [])\n\n  // TODO: make pretty\n  const renderReadyState = useCallback((readyState: UserReadyState) => {\n    const readyUpOnClick = () => readyUp(!readyState.ready);\n    const readyUpButtonClassName = readyState.ready ? 'ready-down' : 'ready-up';\n    const readyUpButtonText = readyState.ready ? 'Ready Down' : 'Ready Up';\n    const readyUpButton = <ReadyUpButton onClick={readyUpOnClick} className={readyUpButtonClassName}>{readyUpButtonText}</ReadyUpButton>\n    return(\n      <li>\n        {\n          renderLobbyUserIcon(readyState.icon)\n        }\n        <div style={{gridArea: 'username'}} className='username-container'>\n          <p>\n              {readyState.user.username}\n          </p>\n        </div>\n        <div style={{gridArea: 'ready-up-button'}}>\n          {\n            userID === readyState.user.id ? readyUpButton : <ReadyStatus className={readyState.ready ? 'ready' : 'not-ready'}>{readyState.ready ? 'Ready!' : 'Waiting'}</ReadyStatus>\n          }\n        </div>\n      </li>\n    );\n  }, [readyUp, renderLobbyUserIcon, userID]);\n\n  const roomName = `${owner?.username ?? 'Uknown User'}'s Room`;\n  return currentPost ? <MainPage currentPost={currentPost} update={update}/> : (\n    <ReadyUpView>\n      <UsersInLobbyContainer style={{gridArea: 'ready-up'}}>\n        <ReadyUpContainer style={{width: '50%'}}>\n            <TitleText>\n                {roomName}\n            </TitleText>\n            <ReadyUpList>\n                {\n                    readyStates.map(readyState => renderReadyState(readyState))\n                }  \n            </ReadyUpList>\n        </ReadyUpContainer>\n      </UsersInLobbyContainer>\n      <ReadyUpContainer style={{gridArea: 'icons'}}>\n        <IconPicker allIcons={icons}/>\n      </ReadyUpContainer>\n      {\n        <StartGameContainer style={{gridArea:'start-game'}}>\n          {\n            roomID && userID && <RoomUpdateButton className={'leave'} onClick={leaveRoom}>Leave Room</RoomUpdateButton>\n          }\n          {\n            owner && userID === owner.id && <RoomUpdateButton onClick={startGame}>Start Game</RoomUpdateButton>\n          }\n      </StartGameContainer>\n      }\n    </ReadyUpView> \n    );\n}\n\nconst ReadyStatus = styled.p`\n  transition: color .2s;\n  &.ready {\n    color: ${p => p.theme.cTagCharacter};\n  }\n\n  &.not-ready {\n    color: ${p => p.theme.cTagSpecies};\n  }\n`\n\nconst ReadyUpButton = styled.button`\n  width: 120px;\n  height: 40px;\n  &.ready-up {\n    color: ${p => p.theme.cTagCharacter};\n    background-color: ${p => p.theme.cTagCharacter};\n    border:2px solid ${p => p.theme.cTagCharacter};\n    background-color: transparent;\n    \n    &:hover {\n      background-color: ${p => p.theme.cTagCharacter};\n    }\n  }\n\n  &.ready-down {\n    color: ${p => p.theme.cTagSpecies};\n    background-color: ${p => p.theme.cTagSpecies};\n    border:2px solid ${p => p.theme.cTagSpecies};\n    background-color: transparent;\n\n    &:hover {\n      background-color: ${p => p.theme.cTagSpecies};\n    }\n  }\n`\n\nconst RoomUpdateButton = styled.button`\n  width: 140px;\n  min-height: 40px;\n  border:2px solid ${p => p.theme.cPrimaryText};\n  background-color: transparent;\n  \n  font-size: 1em;\n  font-weight: bold;\n  color: ${p => p.theme.cPrimaryText};\n\n  &.leave {\n    border:2px solid ${p => p.theme.cTagSpecies};\n    color: ${p => p.theme.cTagSpecies};\n    margin-right: 24px;\n    &:hover {\n      background-color: ${p => p.theme.cTagSpecies};\n    }\n  }\n\n  &:hover {\n    background-color: ${p => p.theme.cPrimaryText};\n  }\n`\n\nconst StartGameContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: flex-start;\n  margin-top: 12px;\n`\n\nconst UsersInLobbyContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`\n\nconst ReadyUpList = styled.ul`\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: left;\n\n    li {\n        display: grid;\n        grid-template-columns: 1fr 2fr 1fr;\n        grid-template-areas: 'icon username ready-up-button';\n        column-gap: 1rem;\n        border-radius: 4px;\n        width: calc(100% - 4rem);\n        padding: 0 1rem 0.25rem 1rem;\n\n        font-size: 1em;\n        font-weight: bold;\n\n        div {\n          transition: border 0.2s;\n\n          display: flex;\n          flex-direction: row;\n          justify-content: center;\n          align-items: center;\n\n          &.icon-unchosen {\n            border-radius: 50%;\n            width: 40px;\n            height: 40px;\n            border: 2px dashed ${p => p.theme.cPrimaryText};\n            background-color: transparent;\n\n            color: ${p => p.theme.cPrimaryText};\n\n            text-shadow: none;\n          }\n\n          &.icon-chosen {\n            border-radius: 50%;\n            border: 2px solid ${p => p.theme.cPrimaryText};\n            width: 40px;\n            height: 40px;\n            img {\n              width: 40px;\n              height: 40px;\n              border-radius: 50%;\n            }\n          }\n        }\n    }\n`;\n\nconst ReadyUpContainer = styled.div`\n    margin: 10px;\n    padding: 2px 0 16px 0;\n    max-width: 98vw;\n    border-radius: 5px;\n    box-shadow: 0 0 5px #000;\n    text-shadow: 0 0 2px black, 0 0 6px black;\n    z-index: 2;\n`\n\nconst ReadyUpView = styled.div`\n  text-align: center;\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: 1fr 2fr 2fr 1fr;\n  grid-template-areas: \n  '. . .'\n  '. ready-up .'\n  '. icons .'\n  '. start-game .';\n  column-gap: 1rem;\n\n  button {\n    transition: background-color .2s, transform .2s, color .2s, border .2s;\n    border-radius: 10%;\n    font-size: 1em;\n    font-weight: bold;\n  }\n\n  button:hover {\n    transform: scale(125%);\n    color:  ${p => p.theme.cLobbyBackground};\n  }\n`\n\nexport default ReadyUp;\n","import { useState, useEffect, useContext } from 'react';\nimport { ConnectionManager } from './util/ConnectionManager';\nimport { UserContext } from './contexts/UserContext';\nimport type { Post, RequestPostEventDataToClient, RequestPostEventData} from './types';\nimport { EventType } from './types';\n\n// custom hook, returns an object that has the CurrentPost, and an update callback function that we define\nexport default function usePostFetcher(connectionManager: ConnectionManager, roomID?: string) : {\n    currentPost: Post | null;\n    update: () => Promise<void>;\n  } {\n    // want component re-rendering when this changes\n    const [currentPost, setCurrentPost] = useState<Post | null>(null);\n    const {userID, readyStates, setReadyStates} = useContext(UserContext);\n  \n    // run update once on mount\n    useEffect( () => {\n      const onRequestPost = (data: RequestPostEventDataToClient) => {\n        const newPost = data.post;\n        if(newPost != null) {\n          newPost.tags.sort((a, b) => b.score - a.score);\n          setCurrentPost(newPost);\n          // reset client side ready states to false\n          const newReadyStates = readyStates.map(readyState => ({...readyState, ready: false}))\n          setReadyStates(newReadyStates);\n        }\n      }\n      const unsubscribers = [connectionManager.listen<RequestPostEventDataToClient>(EventType.enum.REQUEST_POST, onRequestPost)];\n\n      return () => {\n        unsubscribers.forEach(unsubscribe => unsubscribe());\n      }\n    }, [connectionManager, readyStates, setReadyStates]);\n\n    // define what the update callback will be\n    async function update() {\n      if(roomID != null && userID != null) {\n        const data: RequestPostEventData = {type: EventType.enum.REQUEST_POST, roomID: roomID, userID: userID}\n        connectionManager.send(data);\n      }\n    }\n    return { currentPost, update };\n  }","import React, { useContext, useCallback, useState, useEffect} from 'react';\nimport { UserContext } from '../contexts/UserContext';\nimport styled from 'styled-components';\nimport type { ClientRoom, SetUsernameEventDataToClient, JoinRoomEventDataToClient, AllRoomsEventDataToClient, SetUsernameEventData, CreateRoomEventData, AllRoomsEventData, JoinRoomEventData } from '../types';\nimport { EventType } from '../types';\nimport {\n    useNavigate,\n} from 'react-router-dom';\nimport { Container, List, Header, TitleText, TitleContainer } from '../components/StyledElements';\n\n\ntype Props = {\n    className?: string\n}\n\nexport const Lobby: React.FC<Props> = ({className}: Props) => {\n    const {roomID, setRoomID, userID, setUserID, setUsername, setReadyStates, setOwner, username, connectionManager} = useContext(UserContext);\n    const [usernameInput, setUsernameInput] = useState<string>('');\n    const [rooms, setRooms] = useState<ClientRoom[]>([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const onJoinRoom = (data: JoinRoomEventDataToClient) => {\n          console.log(`user: ${data.user.id} has joined room: ${data.room.roomID}`);\n          setRooms([data.room, ...rooms]);\n          // if the update was for this room that we are in, then update the owner\n          if(userID === data.user.id) {\n              setRoomID(data.room.roomID);\n              setReadyStates(data.room.readyStates);\n              setOwner(data.room.owner)\n              console.log(`set owner to ${data.room.owner.username}`);\n            }\n            \n            if(userID === data.user.id) {\n                navigate(\"/play\");\n                document.body.style.backgroundImage = 'none';\n            }\n        }\n        const onAllRooms = (data: AllRoomsEventDataToClient) => {\n            setRooms(data.rooms);\n        }\n\n        const onSetUsername = (data: SetUsernameEventDataToClient) => {\n            if(!userID) {\n                console.log(`Setting username to: ${data.user.id}`);\n                setUserID(data.user.id);\n            }\n            setUsername(data.user.username);\n        }\n        // orchestrate game start\n        const unsubscribers = [\n            connectionManager.listen<JoinRoomEventDataToClient>(EventType.enum.JOIN_ROOM, onJoinRoom),\n            connectionManager.listen<AllRoomsEventDataToClient>(EventType.enum.ALL_ROOMS, onAllRooms),\n            connectionManager.listen<SetUsernameEventDataToClient>(EventType.enum.SET_USERNAME, onSetUsername)\n        ];\n\n        return () => {\n            unsubscribers.forEach(unsubscribe => unsubscribe());\n        }\n    }, [connectionManager, navigate, roomID, rooms, setOwner, setReadyStates, setRoomID, setUserID, setUsername, userID]);\n\n    \n    const createUsername = useCallback((username: string) => {\n        const data: SetUsernameEventData = {type: EventType.enum.SET_USERNAME, userID, username};\n        connectionManager.send(data);\n        console.log(\"setting username to \", username);\n    }, [connectionManager, userID]);\n\n    const createRoom = useCallback(() => {\n        console.log(userID);\n        if(userID) {\n            const data: CreateRoomEventData = {type: EventType.enum.CREATE_ROOM, userID: userID};\n            connectionManager.send(data);\n            console.log(\"creating room\");\n        }\n    }, [connectionManager, userID]);\n\n    const joinRoom = useCallback((roomID: string) => {\n        console.log(`JOINING ROOM ${roomID} FUCKING HELL`);\n        console.log(`userId: ${userID}`);\n        if(userID) {\n            const data: JoinRoomEventData = {type: EventType.enum.JOIN_ROOM, roomID, userID};\n            connectionManager.send(data);\n        }\n    }, [connectionManager, userID]);\n\n    const getAllRooms = useCallback(() => {\n        const data : AllRoomsEventData = {type: EventType.enum.ALL_ROOMS};\n        connectionManager.send(data);\n    }, [connectionManager])\n    \n    useEffect(() => {\n        getAllRooms();\n    }, [getAllRooms])\n\n    const renderRoom = useCallback((room: ClientRoom) => {\n        const {roomID, readyStates, owner} = room;\n        return (\n            <li key={roomID} style={{paddingTop: 4}}>\n                <RoomNameContainer>\n                    <p>\n                        {`${owner.username}'s Room`}\n                    </p>\n                </RoomNameContainer>\n                <JoinRoomButton onClick={() => joinRoom(room.roomID)} className={'joinable'}>\n                    Join!\n                </JoinRoomButton>\n                <ReadyUpStatesContainer>\n                    {\n                        readyStates.map(readyState => {\n                            return <ReadyUpState className={readyState.ready ? 'ready' : ''}/>\n                        })\n                    }\n                </ReadyUpStatesContainer>\n            </li>\n        )\n    }, [joinRoom]);\n\n    const renderSignUp = () => {\n        if(!username) {\n            return <Container>\n                <BlurredImage style={{gridArea: 'e6-join', paddingBottom: 12}}>\n                    <TitleText>\n                        e621 Tag Feud\n                    </TitleText>\n                    <InfoBar>\n                        <a href=\"https://github.com/Zaverose/e621-tag-feud\">contribute</a>\n                        <a href=\"https://twitter.com/zaverose_nsfw\">twitter</a>\n                    </InfoBar>\n                    <label form=\"roomIDForm\">\n                            Log in wtih a username\n                    </label>\n                    <form id=\"roomIDForm\" style={{paddingTop: 8}}onSubmit={(e) => {\n                    e.preventDefault();\n                    createUsername(usernameInput);\n                }}>\n                    <Input \n                    type=\"text\" \n                    placeholder=\"enter a username here\"\n                    size={30}\n                    value={usernameInput} \n                    onChange={(e) => setUsernameInput(e.target.value)}/>\n                    </form>\n                    <form id=\"roomIDForm\" style={{paddingTop: 4, marginBottom: 4}}onSubmit={(e) => {\n                    e.preventDefault();\n                    createUsername(usernameInput);\n                }}>\n            </form>\n            <input type=\"submit\" style={{marginRight: 8}} value=\"Set Username\" form=\"roomIDForm\"/>\n            </BlurredImage>\n        </Container>\n        }\n        return <Container>\n            <BlurredImage style={{gridArea: 'e6-join', paddingBottom: 12}}>\n        <TitleText>\n            e621 Tag Feud\n        </TitleText>\n        <h1 style={{marginTop: 0}}>Create a Room!</h1>\n        <button onClick={createRoom}>\n        Create Room\n        </button>\n        <InfoBar style={{paddingTop: 8}}>\n            <p>Art by <a href=\"https://twitter.com/zaverose_nsfw/status/1462674512017723395\">Zaverose</a></p>\n        </InfoBar>\n    </BlurredImage>\n    <BlurredImage style={{gridArea: 'e6-create', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n        <InfoBar>\n            <a href=\"https://github.com/Zaverose/e621-tag-feud\">contribute</a>\n            <a href=\"https://twitter.com/zaverose_nsfw\">twitter</a>\n        </InfoBar>\n    </BlurredImage>\n    <TitleContainer style={{gridArea: 'rooms', width: 'auto', marginLeft: '1rem', marginRight: '1rem'}}>\n        <TitleText>\n            Joinable Rooms\n        </TitleText>\n        <List>\n            <Header>\n                <p>room name</p>\n                <p></p>\n                <p>users</p>\n            </Header>\n            {\n                rooms.map(room => renderRoom(room))\n            }  \n        </List>\n    </TitleContainer>\n    </Container>;\n    }\n\n    return renderSignUp();\n}\n\nconst ReadyUpStatesContainer = styled.div`\n    display: flex;\n`\n\nconst RoomNameContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n`\n\nconst ReadyUpState = styled.div`\n    height: 25px;\n    width: 25px;\n    border: 2px solid ${p => p.theme.cTagCharacter};\n    border-radius: 50%;\n    background-color: transparent;\n    transition: background-color .2s;\n    &.ready {\n        background-color: ${p => p.theme.cTagCharacter};\n    }\n`\n\nconst JoinRoomButton = styled.button`\n    transition: color .2s, background-color .2s;\n    border-radius: 25%;\n  &.joinable {\n    color: ${p => p.theme.cTagCharacter};\n    background-color: ${p => p.theme.cTagCharacter};\n    border:2px solid ${p => p.theme.cTagCharacter};\n    background-color: transparent;\n    \n    &:hover {\n      background-color: ${p => p.theme.cTagCharacter};\n      color: ${p => p.theme.cBodyLight}\n    }\n  }\n\n  &.unjoinable {\n    color: ${p => p.theme.cTagSpecies};\n    background-color: ${p => p.theme.cTagSpecies};\n    border:2px solid ${p => p.theme.cTagSpecies};\n    filter: brightness(50%);\n  }\n`\n\nconst Input = styled.input`\n    border-radius: 4px;\n    padding: 1px 2px;\n    cursor: text;\n\n    :focus {\n        background: #ffc;\n        color: #000;\n        outline: none;\n    }\n`\n\nconst InfoBar = styled.div`\n    \n`;\n\n// const RoomsView = styled(TitleView)`\n//     /* height: 28rem; */\n//     /* width: calc(100% - 10rem); */\n//     /* margin-right: 80px; */\n//     /* margin-left: 20px; */\n// `;\n\nconst BlurredImage = styled(TitleContainer)`\n    background-color: ${p => p.theme.cLobbyBackground};\n    background-image: url('${p => p.theme.bgImageBlur}');\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: 50% 0%;\n    background-size: 30%;\n    backdrop-filter: blur(8px);\n`","export default __webpack_public_path__ + \"static/media/e6TagGameMascotBlur.ba63271a.png\";","import reg from '../../images/e6TagGameMascot.png';\nimport blur from '../../images/e6TagGameMascotBlur.png';\n\n/**\n * Theme for the application. Update with variables as needed!\n * Accessible via: ${props => props.theme.<name>} within a styled component.\n */\nconst Theme = {\n  // colors\n  cBodyLight: \"#1F3C67\",\n  cTagArtist: \"#F2AC08\",\n  cTagCharacter: \"#00AA00\",\n  cTagSpecies: \"#ED5D1F\",\n  cLobbyBackground: \"rgb(0, 45, 85)\",\n  cPrimaryText: \"#b4c7d9\",\n  cRankFirst: \"#ffda38\",\n  cRankSecond: \"#a3a3a3\",\n  cRankThird: \"#e28c1c\",\n\n  // image paths\n  bgImage: reg,\n  bgImageBlur: blur,\n  \n  // padding\n  pTagList: \"10px\",\n\n  // margin\n  mTag: \"8px\",\n\n  // height\n  inputHeight: \"25px\"\n}\n\nexport default Theme;","import { createGlobalStyle } from \"styled-components\";\nimport Theme from \"./Theme\";\n\nconst GlobalStyles = createGlobalStyle<{ theme: typeof Theme }>`\n  img {\n    max-width: 100%;\n    height: auto;\n    border-radius: inherit;\n  }\n\n  body {\n    margin: 0;\n    background-color: ${p => p.theme.cLobbyBackground};\n    font-family: Verdana, sans-serif;\n    color: white;\n    background-image: url('${p => p.theme.bgImage}');\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: 50% 0%;\n    background-size: 30%;\n  }\n\n  ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  h1 {\n    font-size: 2em;\n    margin: 13px 0 5px 0;\n  }\n\n  h2 {\n    font-size: 1.5em;\n    margin: 0;\n  }\n\n  p {\n    margin: 0;\n  }\n`;\n\nexport default GlobalStyles;","import ReadyUp from './pages/ReadyUp';\nimport { UserContext } from './contexts/UserContext';\nimport { User, UserReadyState } from './types';\nimport { useState } from 'react';\nimport { ConnectionManager } from './util/ConnectionManager';\nimport { Routes, Route } from 'react-router-dom';\nimport { Lobby } from './pages/Lobby';\nimport { ThemeProvider } from 'styled-components';\nimport theme from './styles/theme/Theme';\nimport GlobalStyles from './styles/theme/GlobalTheme';\n\nconst connectionManager = ConnectionManager.getInstance();\n\nfunction App(): JSX.Element {\n  const [username, setUsername] = useState<string | undefined>();\n  const [userID, setUserID] = useState<string | undefined>();\n  const [score, setScore] = useState(0);\n  const [roomID, setRoomID] = useState<string | undefined>();\n  const [readyStates, setReadyStates] = useState<UserReadyState[]>([]);\n  const [icon, setIcon] = useState<string | undefined>();\n  const [owner, setOwner] = useState<User | undefined>();\n\n  const leaveRoomCleanup = () => {\n    setRoomID(undefined);\n    setScore(0);\n    setReadyStates([]);\n    setIcon(undefined);\n    setOwner(undefined);\n  }\n\n  const value = {\n    username, \n    userID, \n    score, \n    roomID, \n    icon, \n    readyStates, \n    owner, \n    setUsername, \n    setUserID, \n    setScore, \n    setRoomID, \n    setIcon, \n    setReadyStates, \n    setOwner, \n    leaveRoomCleanup, \n    connectionManager\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <UserContext.Provider value={value}>\n        <GlobalStyles />\n        <Routes>\n          <Route path=\"/\" element={<Lobby />} />\n          <Route path=\"/play\" element={<ReadyUp />} />\n        </Routes>\n      </UserContext.Provider>\n    </ThemeProvider>\n  )\n}\n// comment\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nconst root = createRoot(\n  document.getElementById('root')!\n);\n\nroot.render(\n  <BrowserRouter>\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n  </BrowserRouter>\n);\n"],"sourceRoot":""}